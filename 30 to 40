//30

-- Create customers table
CREATE TABLE customers (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE
);

-- Create expenses table
CREATE TABLE expenses (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Create income table
CREATE TABLE income (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Insert customers
INSERT INTO customers (id, email) VALUES
(1, 'otoohey0@elpais.com'),
(2, 'egrebbin1@state.gov'),
(3, 'arides2@sohu.com');

-- Insert expenses
INSERT INTO expenses (customer_id, dt, amount) VALUES
(1, '2024-02-21 22:12:12', 90.41),
(1, '2024-02-27 06:48:37', 792.88),
(1, '2024-03-10 05:19:43', 442.01),
(1, '2024-03-11 19:48:25', 327.35),
(1, '2024-03-24 22:03:06', 639.62),
(1, '2024-03-29 00:37:46', 150.12),
(1, '2024-04-02 03:36:50', 257.67),
(2, '2024-02-21 06:11:26', 400.22),
(2, '2024-03-11 15:34:19', 298.41),
(2, '2024-03-25 04:36:27', 376.87),
(2, '2024-03-29 19:05:51', 530.07),
(2, '2024-03-30 07:07:28', 287.84),
(2, '2024-04-02 15:44:22', 868.03),
(3, '2024-03-01 16:02:47', 33.30),
(3, '2024-03-06 11:53:42', 838.51),
(3, '2024-03-20 23:34:48', 968.08),
(3, '2024-03-21 21:18:08', 35.36),
(3, '2024-03-30 06:51:13', 956.12),
(3, '2024-03-31 10:11:56', 896.32),
(3, '2024-03-31 22:36:57', 740.94);

-- Insert income
INSERT INTO income (customer_id, dt, amount) VALUES
(1, '2024-02-20 21:00:55', 366.66),
(1, '2024-03-11 03:25:04', 769.38),
(1, '2024-03-15 00:49:53', 84.10),
(1, '2024-03-21 18:32:51', 839.48),
(1, '2024-03-29 15:34:13', 333.97),
(1, '2024-04-01 00:34:24', 253.13),
(1, '2024-04-02 11:13:49', 263.56),
(2, '2024-02-20 15:03:26', 822.75),
(2, '2024-02-26 14:57:39', 277.23),
(2, '2024-03-19 09:24:47', 24.08),
(2, '2024-03-20 15:54:24', 988.34),
(2, '2024-04-02 08:28:38', 990.54),
(3, '2024-02-21 10:23:33', 430.82),
(3, '2024-02-29 08:25:32', 482.85),
(3, '2024-03-01 05:10:42', 962.60),
(3, '2024-03-04 08:27:34', 30.21),
(3, '2024-03-19 12:12:01', 80.00),
(3, '2024-03-21 00:32:10', 674.76),
(3, '2024-03-23 14:14:32', 863.79),
(3, '2024-04-09 13:37:07', 51.42);




SELECT 
    c.email,
    COALESCE(SUM(i.amount),0) AS total_income,
   COALESCE( SUM(e.amount),0) AS total_expenses
FROM customers c
LEFT JOIN income i 
    ON c.id = i.customer_id 
    AND EXTRACT(YEAR FROM i.dt::date) = 2024 
    AND EXTRACT(MONTH FROM i.dt::date) = 3
LEFT JOIN expenses e 
    ON c.id = e.customer_id 
    AND EXTRACT(YEAR FROM e.dt::date) = 2024 
    AND EXTRACT(MONTH FROM e.dt::date) = 3
GROUP BY c.email;



SELECT * FROM income




SELECT
c.email


from customers c
join (
SELECT customer_id ,SUM(amount) as total_amount
from income
where extract(year from dt::date)= 2024
and extract (year from dt::date) = 3
group by customer_id


) i on c.id = i.customer_id
group by c.email




SELECT
    c.email,
	e.total_expenses,
    i.total_amount
	
FROM customers c
JOIN (
    SELECT customer_id, SUM(amount) AS total_amount
    FROM income
    WHERE EXTRACT(YEAR FROM dt::date) = 2024
      AND EXTRACT(MONTH FROM dt::date) = 3
    GROUP BY customer_id
) 
i ON c.id = i.customer_id


JOIN (
SELECT customer_id , SUM(amount) as total_expenses
from expenses 
 WHERE EXTRACT(YEAR FROM dt::date) = 2024
      AND EXTRACT(MONTH FROM dt::date) = 3
	  group by customer_id
) e on c.id = e.customer_id




GROUP BY c.email, i.total_amount, e.total_expenses

order by c.email









SELECT 
    c.email,
    SUM(i.amount) FILTER (
        WHERE EXTRACT(YEAR FROM i.dt::date) = 2024
          AND EXTRACT(MONTH FROM i.dt::date) = 3
    ) AS total_income,
    SUM(e.amount) FILTER (
        WHERE EXTRACT(YEAR FROM e.dt::date) = 2024
          AND EXTRACT(MONTH FROM e.dt::date) = 3
    ) AS total_expenses
FROM customers c
LEFT JOIN income i 
    ON c.id = i.customer_id
LEFT JOIN expenses e 
    ON c.id = e.customer_id
GROUP BY c.email
ORDER BY c.email;






// 31





SELECT
    c.email,
    ROUND(SUM(i.amount) - SUM(e.amount), 2) AS balance
FROM customers c
JOIN income i
    ON c.id = i.customer_id
JOIN expenses e
    ON c.id = e.customer_id
GROUP BY c.email
HAVING (SUM(i.amount) - SUM(e.amount)) < 0
ORDER BY c.email ASC;




// 32


// 32



-- 1. Create products table
CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- 2. Create sales table
CREATE TABLE sales (
    product_id INT REFERENCES products(id),
    dt TIMESTAMP NOT NULL,
    amount DECIMAL(7,2) NOT NULL
);

-- 3. Insert products data
INSERT INTO products (id, name) VALUES
(1, 'Luxury Gold Watch'),
(2, 'Smartphone Holder Stand'),
(3, 'Stainless Steel Water Bottle');

-- 4. Insert sales data
INSERT INTO sales (product_id, dt, amount) VALUES
(1, '2024-01-13 17:12:22', 7008.16),
(1, '2024-01-03 03:15:27', 6191.64),
(1, '2024-01-22 18:29:09', 4527.86),
(1, '2024-01-26 19:38:53', 7828.36),
(1, '2024-02-17 09:27:13', 5273.16),
(1, '2024-02-11 09:51:24', 3364.73),
(1, '2024-02-22 23:53:15', 8584.33),
(2, '2024-01-28 11:33:58', 3710.06),
(2, '2024-01-25 14:47:25', 5221.02),
(2, '2024-01-21 07:58:53', 2525.72),
(2, '2024-03-15 14:16:18', 8158.08),
(2, '2024-03-12 17:02:01', 6760.77),
(3, '2024-01-13 19:27:51', 1942.79),
(3, '2024-02-15 08:04:40', 9186.38),
(3, '2024-03-06 08:02:37', 5821.97),
(3, '2024-03-03 15:39:18', 8676.24),
(2, '2024-04-08 09:53:01', 6327.20),
(1, '2023-12-26 05:48:22', 8360.43),
(1, '2023-12-15 14:52:51', 9101.30),
(3, '2023-12-21 15:57:50', 3857.98);



















SELECT 

p.name ,

CASE

EXTRACT(month from s.dt::date) 
when 1
then 'January'
when 2
 then 'February'
 when 3
 then 'March'
end as month_name , 


SUM(s.amount) as total_sales 


from products p 
join sales s 
on p.id = s.product_id
where EXTRACT (YEAR FROM s.dt::date) = 2024
and extract (month from s.dt::date) in (1,2,3) 


group by p.name, EXTRACT (month from s.dt::date)



order by  EXTRACT (month from s.dt::date) ,  total_sales DESC








SELECT 
    p.name,
    TO_CHAR(s.dt::date, 'Month') AS month_name,
    SUM(s.amount) AS total_sales
FROM products p
JOIN sales s 
    ON p.id = s.product_id
WHERE EXTRACT(YEAR FROM s.dt::date) = 2024
  AND EXTRACT(MONTH FROM s.dt::date) IN (1,2,3)
GROUP BY p.name, month_name , EXTRACT(MONTH FROM s.dt::date)
ORDER BY EXTRACT(MONTH FROM s.dt::date), total_sales DESC;





// 33









// 34 
SELECT 
    wallet,
    COUNT(*) AS total_transactions,
    ROUND(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 2) AS total_bought,
    ROUND(SUM(CASE WHEN amount < 0 THEN -amount ELSE 0 END), 2) AS total_sold
FROM transactions
WHERE dt >= '2024-02-01' 
  AND dt < '2024-03-01'
GROUP BY wallet
ORDER BY wallet;





// 35



SELECT 
    e.email,
    COALESCE(SUM(l.days_taken), 0) AS leave_days_taken,
    CASE 
        WHEN COALESCE(SUM(l.days_taken), 0) <= 20 THEN 'Within Limit'
        ELSE 'Exceeded'
    END AS leave_status
FROM employees e
LEFT JOIN leave_records l 
    ON e.id = l.employee_id
    AND l.leave_dt >= '2023-01-01' 
    AND l.leave_dt < '2024-01-01'
GROUP BY e.email
ORDER BY e.email ASC;





// 36



SELECT
    c.name,
    SUM(e.emails_sent) AS total_emails_sent,
    SUM(e.emails_opened) AS total_emails_opened,
    ROUND(SUM(e.emails_opened)::numeric / SUM(e.emails_sent) * 100, 2) AS open_rate
FROM campaigns c
JOIN email_stats e ON c.id = e.campaign_id
GROUP BY c.name
HAVING (SUM(e.emails_opened)::numeric / SUM(e.emails_sent) * 100) > 50
ORDER BY open_rate DESC, c.name ASC;



// 37 


//37

SELECT * FROM bonds


SELECT * FROM maturities


SELECT 
    b.name,
    COUNT(m.maturity) AS maturity_dates,
    MIN(m.maturity) AS earliest_maturity,
    MAX(m.maturity) AS latest_maturity,
    CEIL(AVG(m.maturity - make_date(2023, 9, 13)))::INT AS avg_days_to_maturity
FROM 
    bonds b
JOIN 
    maturities m ON b.id = m.bond_id
GROUP BY 
    b.name
HAVING 
    CEIL(AVG(m.maturity - make_date(2023, 9, 13))) > 365
ORDER BY 
    b.name ASC;




// 38



SELECT 
b.name,
COUNT(*),
MIN(rate),
MAX(rate),
ROUND(AVG(rate),2)

FROM 
bonds b 
join 
interest_rates i 
on b.id = i.bond_id
group by b.name
having AVG(rate)> 3
order by b.name

// 39




SELECT bo.name,
ROUND(SUM(b.annual_coupon * b.coupons_remaining ),2)

FROM 
bondholders bo 
join bondholders_bonds bb
on bo.id = bb.bondholder_id
join  bonds b
on b.id = bb.bond_id
group by bo.name
having SUM(b.annual_coupon * b.coupons_remaining ) > 10000




// 40



SELECT 
i.email,
COUNT(c.investor_id) as investments,
min(c.cash_flow) as min_flow,
max(c.cash_flow) as max_flow,
ROUND(avg(c.cash_flow),2) as avg_flow
from investors i 
join 
cash_flows c 
on
i.id = c.investor_id
group by i.email
having SUM(c.cash_flow) > 1000000
order by i.email

