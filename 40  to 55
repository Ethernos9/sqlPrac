//30

-- Create customers table
CREATE TABLE customers (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE
);

-- Create expenses table
CREATE TABLE expenses (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Create income table
CREATE TABLE income (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Insert customers
INSERT INTO customers (id, email) VALUES
(1, 'otoohey0@elpais.com'),
(2, 'egrebbin1@state.gov'),
(3, 'arides2@sohu.com');

-- Insert expenses
INSERT INTO expenses (customer_id, dt, amount) VALUES
(1, '2024-02-21 22:12:12', 90.41),
(1, '2024-02-27 06:48:37', 792.88),
(1, '2024-03-10 05:19:43', 442.01),
(1, '2024-03-11 19:48:25', 327.35),
(1, '2024-03-24 22:03:06', 639.62),
(1, '2024-03-29 00:37:46', 150.12),
(1, '2024-04-02 03:36:50', 257.67),
(2, '2024-02-21 06:11:26', 400.22),
(2, '2024-03-11 15:34:19', 298.41),
(2, '2024-03-25 04:36:27', 376.87),
(2, '2024-03-29 19:05:51', 530.07),
(2, '2024-03-30 07:07:28', 287.84),
(2, '2024-04-02 15:44:22', 868.03),
(3, '2024-03-01 16:02:47', 33.30),
(3, '2024-03-06 11:53:42', 838.51),
(3, '2024-03-20 23:34:48', 968.08),
(3, '2024-03-21 21:18:08', 35.36),
(3, '2024-03-30 06:51:13', 956.12),
(3, '2024-03-31 10:11:56', 896.32),
(3, '2024-03-31 22:36:57', 740.94);

-- Insert income
INSERT INTO income (customer_id, dt, amount) VALUES
(1, '2024-02-20 21:00:55', 366.66),
(1, '2024-03-11 03:25:04', 769.38),
(1, '2024-03-15 00:49:53', 84.10),
(1, '2024-03-21 18:32:51', 839.48),
(1, '2024-03-29 15:34:13', 333.97),
(1, '2024-04-01 00:34:24', 253.13),
(1, '2024-04-02 11:13:49', 263.56),
(2, '2024-02-20 15:03:26', 822.75),
(2, '2024-02-26 14:57:39', 277.23),
(2, '2024-03-19 09:24:47', 24.08),
(2, '2024-03-20 15:54:24', 988.34),
(2, '2024-04-02 08:28:38', 990.54),
(3, '2024-02-21 10:23:33', 430.82),
(3, '2024-02-29 08:25:32', 482.85),
(3, '2024-03-01 05:10:42', 962.60),
(3, '2024-03-04 08:27:34', 30.21),
(3, '2024-03-19 12:12:01', 80.00),
(3, '2024-03-21 00:32:10', 674.76),
(3, '2024-03-23 14:14:32', 863.79),
(3, '2024-04-09 13:37:07', 51.42);




SELECT 
    c.email,
    COALESCE(SUM(i.amount),0) AS total_income,
   COALESCE( SUM(e.amount),0) AS total_expenses
FROM customers c
LEFT JOIN income i 
    ON c.id = i.customer_id 
    AND EXTRACT(YEAR FROM i.dt::date) = 2024 
    AND EXTRACT(MONTH FROM i.dt::date) = 3
LEFT JOIN expenses e 
    ON c.id = e.customer_id 
    AND EXTRACT(YEAR FROM e.dt::date) = 2024 
    AND EXTRACT(MONTH FROM e.dt::date) = 3
GROUP BY c.email;



SELECT * FROM income




SELECT
c.email


from customers c
join (
SELECT customer_id ,SUM(amount) as total_amount
from income
where extract(year from dt::date)= 2024
and extract (year from dt::date) = 3
group by customer_id


) i on c.id = i.customer_id
group by c.email




SELECT
    c.email,
	e.total_expenses,
    i.total_amount
	
FROM customers c
JOIN (
    SELECT customer_id, SUM(amount) AS total_amount
    FROM income
    WHERE EXTRACT(YEAR FROM dt::date) = 2024
      AND EXTRACT(MONTH FROM dt::date) = 3
    GROUP BY customer_id
) 
i ON c.id = i.customer_id


JOIN (
SELECT customer_id , SUM(amount) as total_expenses
from expenses 
 WHERE EXTRACT(YEAR FROM dt::date) = 2024
      AND EXTRACT(MONTH FROM dt::date) = 3
	  group by customer_id
) e on c.id = e.customer_id




GROUP BY c.email, i.total_amount, e.total_expenses

order by c.email









SELECT 
    c.email,
    SUM(i.amount) FILTER (
        WHERE EXTRACT(YEAR FROM i.dt::date) = 2024
          AND EXTRACT(MONTH FROM i.dt::date) = 3
    ) AS total_income,
    SUM(e.amount) FILTER (
        WHERE EXTRACT(YEAR FROM e.dt::date) = 2024
          AND EXTRACT(MONTH FROM e.dt::date) = 3
    ) AS total_expenses
FROM customers c
LEFT JOIN income i 
    ON c.id = i.customer_id
LEFT JOIN expenses e 
    ON c.id = e.customer_id
GROUP BY c.email
ORDER BY c.email;








// 39






DROP TABLE IF EXISTS bondholders_bonds;
DROP TABLE IF EXISTS bonds;
DROP TABLE IF EXISTS bondholders;

-- Bondholders
CREATE TABLE bondholders (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Bonds
CREATE TABLE bonds (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    annual_coupon DECIMAL(5,2) NOT NULL,
    coupons_remaining INT NOT NULL
);

-- Bondholders_Bonds (many-to-many relationship)
CREATE TABLE bondholders_bonds (
    bondholder_id INT REFERENCES bondholders(id),
    bond_id INT REFERENCES bonds(id)
);




-- Bondholders
INSERT INTO bondholders (id, name) VALUES
(1, 'Alex Smith'),
(2, 'Taylor Johnson'),
(3, 'Jordan Davis');

-- Bonds
INSERT INTO bonds (id, name, annual_coupon, coupons_remaining) VALUES
(1, 'Golden Bonds', 150.00, 4),
(2, 'Silver Lining', 200.00, 2),
(3, 'Diamond Trust', 100.00, 4),
(4, 'Emerald Wealth', 350.00, 5),
(5, 'Ruby Returns', 150.00, 8),
(6, 'Sapphire Security', 450.00, 5),
(7, 'Amber Assurance', 100.00, 8),
(8, 'Topaz Treasury', 100.00, 2),
(9, 'Opal Opportunities', 150.00, 5),
(10, 'Pearl Prosperity', 450.00, 5),
(11, 'Platinum Promise', 450.00, 9),
(12, 'Jade Investments', 350.00, 1),
(13, 'Garnet Growth', 150.00, 4),
(14, 'Onyx Returns', 350.00, 2),
(15, 'Quartz Capital', 100.00, 2),
(16, 'Citrine Securities', 250.00, 2),
(17, 'Aquamarine Assets', 250.00, 2),
(18, 'Peridot Portfolio', 300.00, 8),
(19, 'Tourmaline Trust', 100.00, 6),
(20, 'Moonstone Money', 150.00, 9);

-- Bondholders_Bonds (ownership mapping)
INSERT INTO bondholders_bonds (bondholder_id, bond_id) VALUES
-- Alex Smith
(1, 1),
(1, 2),
(1, 6),
(1, 8),
(1, 9),
(1, 13),
(1, 14),
(1, 16),
(1, 17),
-- Taylor Johnson
(2, 4),
(2, 5),
(2, 7),
(2, 11),
(2, 15),
(2, 18),
-- Jordan Davis
(3, 3),
(3, 10),
(3, 12),
(3, 19),
(3, 20);



SELECT bo.name,
ROUND(SUM(b.annual_coupon * b.coupons_remaining ),2)

FROM 
bondholders bo 
join bondholders_bonds bb
on bo.id = bb.bondholder_id
join  bonds b
on b.id = bb.bond_id
group by bo.name
having SUM(b.annual_coupon * b.coupons_remaining ) > 10000




// 40




-- Create investors table
CREATE TABLE investors (
    id INT PRIMARY KEY,
    email VARCHAR(255) UNIQUE
);

-- Create cash_flows table
CREATE TABLE cash_flows (
    investor_id INT,
    cash_flow DECIMAL(12,2),
    FOREIGN KEY (investor_id) REFERENCES investors(id)
);

-- Insert data into investors
INSERT INTO investors (id, email) VALUES
(1, 'ematson0@ebay.co.uk'),
(2, 'lsalvadore1@msn.com'),
(3, 'aclowser2@patch.com');

-- Insert data into cash_flows
INSERT INTO cash_flows (investor_id, cash_flow) VALUES
(1, 184040.12),
(1, 179280.08),
(1, 179374.42),
(1, 79302.21),
(1, 87466.20),
(1, 194588.36),
(1, 153563.92),
(1, 56377.92),
(2, 59039.14),
(2, 167247.23),
(2, 59311.03),
(2, 183883.00),
(2, 118851.21),
(3, 58868.62),
(3, 96909.26),
(3, 103735.73),
(3, 171261.97),
(3, 86463.11),
(3, 56931.73),
(3, 194699.58);







SELECT 
i.email,
COUNT(c.investor_id) as investments,
min(c.cash_flow) as min_flow,
max(c.cash_flow) as max_flow,
ROUND(avg(c.cash_flow),2) as avg_flow
from investors i 
join 
cash_flows c 
on
i.id = c.investor_id
group by i.email
having SUM(c.cash_flow) > 1000000
order by i.email




// 41

DROP TABLE if exists investors
DROP TABLE if exists cash_flows

-- Create investors table
CREATE TABLE investors (
    id INT PRIMARY KEY,
    email VARCHAR(255) UNIQUE
);

-- Create cash_flows table
CREATE TABLE cash_flows (
    investor_id INT,
    expected_flow DECIMAL(12,2),
    FOREIGN KEY (investor_id) REFERENCES investors(id)
);

-- Insert data into investors
INSERT INTO investors (id, email) VALUES
(1, 'tdowner0@timesonline.co.uk'),
(2, 'cgarza1@opera.com'),
(3, 'nbarwise2@si.edu');

-- Insert data into cash_flows
INSERT INTO cash_flows (investor_id, expected_flow) VALUES
(1, 24923.83),
(1, 30212.10),
(1, 87126.50),
(1, 56018.65),
(1, 93357.47),
(1, 55073.54),
(1, 27095.07),
(2, 44165.12),
(2, 43658.84),
(2, 35835.34),
(2, 12660.46),
(2, 58676.60),
(2, 95929.25),
(2, 47161.23),
(2, 80283.91),
(2, 54427.20),
(2, 93223.98),
(3, 19741.35),
(3, 12243.25),
(3, 50470.06);




SELECT 
i.email,
COUNT(*) as investment_count,
SUM(c.expected_flow) as total_expected_flow,
(MAX(c.expected_flow)  - min(c.expected_flow)) as range_expected

FROM
investors i
join cash_flows c

on i.id = c.investor_id
group by i.email
having SUM(c.expected_flow) > 100000
order by i.email




// 42


-- Create coupons table
CREATE TABLE coupons (
    id INT PRIMARY KEY,
    coupon_code VARCHAR(255) UNIQUE,
    description VARCHAR(255),
    is_enabled SMALLINT
);

-- Create coupon_uses table
CREATE TABLE coupon_uses (
    coupon_id INT,
    amount DECIMAL(6,2), -- widened size to handle >99.99 safely
    FOREIGN KEY (coupon_id) REFERENCES coupons(id)
);

-- Insert data into coupons
INSERT INTO coupons (id, coupon_code, description, is_enabled) VALUES
(1, 'COUPON123', 'nisi nam ultrices libero non', 0),
(2, 'SAVE20', 'ac est lacinia', 1),
(3, 'DISCOUNT50', 'quis odio consequat', 1);

-- Insert data into coupon_uses
INSERT INTO coupon_uses (coupon_id, amount) VALUES
(1, 36.68),
(1, 3.56),
(1, 2.10),
(1, 39.58),
(2, 39.81),
(2, 24.07),
(2, 28.42),
(2, 31.03),
(2, 3.24),
(2, 36.33),
(3, 8.89),
(3, 30.44),
(3, 36.94),
(3, 42.65),
(3, 33.61),
(3, 41.92),
(3, 1.78),
(3, 20.26),
(3, 27.92),
(3, 0.23);






SELECT
c.coupon_code,
c.description,
COUNT(*) as total_uses,
min(cc.amount),
max(cc.amount),

ROUND(avg(cc.amount),2)


 from   coupons c
 join coupon_uses cc
 on c.id = cc.coupon_id

 where c.is_enabled =1
group by c.coupon_code,
c.description
order by c.coupon_code
 





//43 
DROP TABLE if exists professions
DROP TABLE if exists  freelancers
DROP TABLE if exists  projects

-- Drop tables if they already exist (to recreate cleanly)
DROP TABLE IF EXISTS projects CASCADE;
DROP TABLE IF EXISTS freelancers CASCADE;
DROP TABLE IF EXISTS professions CASCADE;

-- Table: professions
CREATE TABLE professions (
    id INT PRIMARY KEY,
    title VARCHAR(255) UNIQUE NOT NULL
);

-- Table: freelancers
CREATE TABLE freelancers (
    id INT PRIMARY KEY,
    profession_id INT NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    CONSTRAINT fk_profession
        FOREIGN KEY (profession_id) 
        REFERENCES professions (id)
        ON DELETE CASCADE
);

-- Table: projects
CREATE TABLE projects (
    id INT PRIMARY KEY,
    freelancer_id INT NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Completed','Ongoing','Cancelled')),
    income DECIMAL(10,2) CHECK (income >= 0),
    CONSTRAINT fk_freelancer
        FOREIGN KEY (freelancer_id) 
        REFERENCES freelancers (id)
        ON DELETE CASCADE
);



-- Insert data into professions
INSERT INTO professions (id, title) VALUES
(1, 'Articial Intelligence Engineer'),
(2, 'Network Administrator'),
(3, 'Game Developer');

-- Insert data into freelancers
INSERT INTO freelancers (id, profession_id, email) VALUES
(1, 1, 'lfernez0@microsoft.com'),
(3, 2, 'mbrydone2@delicious.com'),
(4, 2, 'jhamp3@4shared.com'),
(5, 3, 'cparfett4@twitter.com');

-- Insert data into projects
INSERT INTO projects (id, freelancer_id, status, income) VALUES
(5, 1, 'Completed', 8562.13),
(11, 1, 'Completed', 6727.56),
(10, 3, 'Completed', 3753.46),
(20, 3, 'Completed', 6659.39),
(6, 4, 'Completed', 8459.28),
(13, 4, 'Completed', 5899.31),
(16, 4, 'Completed', 2709.63),
(4, 5, 'Completed', 5029.44),
(7, 5, 'Completed', 1763.94),
(9, 5, 'Completed', 6988.36),
(8, 3, 'Cancelled', 8699.67),
(1, 5, 'Cancelled', 5403.21),
(19, 3, 'Ongoing', 72.51),
(3, 4, 'Ongoing', 8561.14),
(15, 4, 'Ongoing', 9235.78),
(17, 4, 'Ongoing', 4307.76);







SELECT  
po.title,
COUNT(p.id) as total_projects,
SUM(p.income),
COUNT(f.id)
FROM 
professions po
join freelancers f 
on
po.id = 
f.profession_id
join projects p on
p.freelancer_id= f.id

group by po.title,p.status
having p.status='completed'



















































SELECT 
po.title,
COUNT(p.id) as total_projects,
SUM(p.income) as total_income,
COUNT(f.id) as total_freelancers , 
avg(p.income) as avg_income

FROM 
professions po 
join freelancers f 
on po.id = f.profession_id
join projects p on p.id = 
f.profession_id
group by po.title
-- having p.status= 'completed'
order by total_income

SELECT  
    po.title,
    COUNT(p.id) AS total_projects,
    SUM(p.income) AS total_income,
    COUNT(DISTINCT f.id) AS total_freelancers
FROM professions po
JOIN freelancers f ON po.id = f.profession_id
JOIN projects p ON p.freelancer_id = f.id
WHERE p.status = 'Completed'
GROUP BY po.title;

























SELECT  
    po.title,
    COUNT(p.id) AS total_projects,
    SUM(p.income) AS total_income,
    COUNT(DISTINCT f.id) AS total_freelancers
FROM professions po
JOIN freelancers f ON po.id = f.profession_id
JOIN projects p ON p.freelancer_id = f.id
WHERE p.status = 'Completed'
GROUP BY po.title
order by 










SELECT * FROM investors
SELECT * FROM cash_flows









SELECT  
    po.title,
    COUNT(p.id) AS total_projects,
    SUM(p.income) AS total_income,
    COUNT( DISTINCT f.id) AS total_freelancers,
    ROUND((SUM(p.income) /  COUNT(p.id)),2) as avg_income_per_fre
 FROM professions po
JOIN freelancers f ON po.id = f.profession_id
JOIN projects p ON p.freelancer_id = f.id
WHERE p.status = 'Completed'
GROUP BY po.title
order by total_income desc

//44


-- Create tables
CREATE TABLE categories (
    id INT PRIMARY KEY,
    title VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE products (
    id INT PRIMARY KEY,
    category_id INT REFERENCES categories(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    sku VARCHAR(255) UNIQUE NOT NULL,
    stock_number INT NOT NULL
);

-- Insert data into categories
INSERT INTO categories (id, title) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Home & Kitchen');

-- Insert data into products
INSERT INTO products (id, category_id, title, sku, stock_number) VALUES
(11, 1, 'Elegant Gadget', 'EG-11', 4),
(3, 1, 'Luxury Gizmo', 'LG-3', 10),
(19, 1, 'Sleek Widget', 'SW-19', 8),
(8, 1, 'Sleek Widget', 'SW-8', 8),

(14, 2, 'Elegant Gadget', 'EG-14', 2),
(16, 2, 'Elegant Gadget', 'EG-16', 6),
(10, 2, 'Elegant Gadget', 'EG-10', 10),
(7, 2, 'Luxury Gizmo', 'LG-7', 3),
(2, 2, 'Luxury Gizmo', 'LG-2', 8),
(18, 2, 'Luxury Gizmo', 'LG-18', 9),
(1, 2, 'Sleek Widget', 'SW-1', 3),
(6, 2, 'Sleek Widget', 'SW-6', 7),

(20, 3, 'Elegant Gadget', 'EG-20', 10),
(9, 3, 'Luxury Gizmo', 'LG-9', 4),
(12, 3, 'Luxury Gizmo', 'LG-12', 5),
(13, 3, 'Luxury Gizmo', 'LG-13', 5),
(5, 3, 'Luxury Gizmo', 'LG-5', 9),
(4, 3, 'Sleek Widget', 'SW-4', 8),
(15, 3, 'Sleek Widget', 'SW-15', 9),
(17, 3, 'Sleek Widget', 'SW-17', 9);














SELECT
c.title,
p.title,
SUM(p.stock_number)

FROM 

products  p 

join categories c
on c.id = p.category_id

group by c.title,p.title

having SUM(p.stock_number)> 10
order by c.title , p.title,SUM(p.stock_number) DESC




//45



-- Create threat_types table
CREATE TABLE threat_types (
    id INT PRIMARY KEY,
    threat_type VARCHAR(255) NOT NULL
);

-- Create quarantine_urls table
CREATE TABLE quarantine_urls (
    id INT PRIMARY KEY,
    threat_id INT REFERENCES threat_types(id) ON DELETE CASCADE,
    domain_name VARCHAR(255) NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Quarantined', 'Safe', 'Deleted')),
    users_affected INT NOT NULL
);

-- Insert data into threat_types
INSERT INTO threat_types (id, threat_type) VALUES
(1, 'Phishing'),
(2, 'Rootkit'),
(3, 'Malware');

-- Insert data into quarantine_urls
INSERT INTO quarantine_urls (id, threat_id, domain_name, status, users_affected) VALUES
(17, 1, 'amazon.com', 'Quarantined', 862),
(16, 1, 'google.com', 'Quarantined', 63),
(9, 1, 'amazon.com', 'Quarantined', 41),
(18, 2, 'amazon.com', 'Quarantined', 149),
(12, 2, 'yahoo.com', 'Quarantined', 967),
(4, 3, 'amazon.com', 'Quarantined', 377),
(10, 3, 'yahoo.com', 'Quarantined', 721),
(11, 1, 'yahoo.com', 'Deleted', 551),
(20, 1, 'amazon.com', 'Safe', 407),
(19, 1, 'amazon.com', 'Deleted', 665),
(15, 1, 'facebook.com', 'Safe', 52),
(2, 1, 'google.com', 'Safe', 309),
(1, 2, 'twitter.com', 'Safe', 562),
(13, 2, 'facebook.com', 'Safe', 208),
(14, 2, 'google.com', 'Deleted', 731),
(8, 2, 'twitter.com', 'Safe', 924),
(7, 2, 'twitter.com', 'Safe', 982),
(6, 2, 'google.com', 'Deleted', 864),
(3, 2, 'facebook.com', 'Safe', 136),
(5, 3, 'yahoo.com', 'Safe', 949);






SELECT 
q.domain_name,
t.threat_type,
COUNT(*),

SUM(q.users_affected)


FROM
threat_types t 
join 
quarantine_urls q
 on t.id = q.threat_id
 

where q.status = 'Quarantined'


group by 
q.domain_name,
t.threat_type

order by SUM(q.users_affected) desc , 
q.domain_name




// 46


-- Create clients table
CREATE TABLE clients (
    id INT PRIMARY KEY,
    mac_address VARCHAR(255) NOT NULL
);

-- Create streams table
CREATE TABLE streams (
    client_id INT REFERENCES clients(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    quality VARCHAR(10) CHECK (quality IN ('240p','360p','480p','720p','1080p','1440p','2160p')),
    trac BIGINT NOT NULL
);

-- Insert data into clients
INSERT INTO clients (id, mac_address) VALUES
(1, '2F-80-8E-F2-0E-4C'),
(2, 'A1-F7-D4-48-B9-E6'),
(3, '9F-72-DB-7C-73-FC');

-- Insert data into streams
INSERT INTO streams (client_id, title, quality, trac) VALUES
(1, 'Monte Carlo', '360p', 71928308),
(1, 'Separation, The (Sparation, La)', '480p', 35221785),
(1, 'Felidae', '480p', 54617023),
(1, 'Dirty Dancing', '1440p', 56419563),
(1, 'Ragtime', '1440p', 12404457),
(1, 'Oscar', '1440p', 49717246),
(1, 'Barb Wire', '2160p', 83761463),
(1, 'Jason and the Argonauts', '2160p', 27364051),

(2, 'Carry on Cruising', '240p', 33226462),
(2, 'Best of the Best', '240p', 62793858),
(2, 'Ecstasy (xtasis)', '240p', 73079415),
(2, 'Go Go Tales', '480p', 48836837),
(2, 'Nights and Weekends', '1440p', 32708277),

(3, 'Coneheads', '480p', 92308213),
(3, 'Silences of the Palace, The (Saimt el Qusur)', '480p', 52917945),
(3, 'Good Pick', '720p', 71890218),
(3, 'Wuthering Heights', '720p', 19813053),
(3, 'Big Kahuna, The', '1080p', 28786846),
(3, 'Work of Director Michel Gondry, The', '2160p', 18789351),
(3, 'My Best Friends', '2160p', 44347338);





SELECT 
c.mac_address,
COUNT(*) as total_streams,
SUM(s.trac) as total_traffic


FROM 

clients c 
join streams s 
on c.id = s.client_id

WHERE LEFT(s.quality,LENGTH(s.quality)-1)::INT >= 720
group by c.mac_address
order by SUM(s.trac) DESC










//47


-- Create networks table
CREATE TABLE networks (
    id INT PRIMARY KEY,
    cidr VARCHAR(255) NOT NULL
);

-- Create instances table
CREATE TABLE instances (
    network_id INT REFERENCES networks(id) ON DELETE CASCADE,
    cpu_usage VARCHAR(10) NOT NULL,
    memory_usage VARCHAR(10) NOT NULL,
    network_usage VARCHAR(10) NOT NULL
);

-- Insert data into networks
INSERT INTO networks (id, cidr) VALUES
(1, '24.77.36.156/9'),
(2, '74.213.138.70/7'),
(3, '167.244.163.58/29');

-- Insert data into instances
INSERT INTO instances (network_id, cpu_usage, memory_usage, network_usage) VALUES
(1, '20%', '74%', '74%'),
(3, '26%', '9%', '99%'),
(3, '2%', '21%', '97%'),
(1, '51%', '19%', '89%'),
(2, '2%', '27%', '79%'),
(3, '92%', '35%', '41%'),
(2, '27%', '5%', '44%'),
(3, '67%', '47%', '79%'),
(1, '14%', '28%', '43%'),
(3, '47%', '0%', '53%'),
(1, '38%', '3%', '46%'),
(2, '71%', '51%', '6%'),
(3, '77%', '74%', '53%'),
(3, '31%', '48%', '80%'),
(2, '31%', '42%', '24%'),
(1, '77%', '65%', '46%'),
(2, '51%', '94%', '41%'),
(3, '8%', '3%', '57%'),
(1, '1%', '56%', '62%'),
(2, '15%', '66%', '65%');








SELECT n.cidr,
COUNT(*) as total_instances,
CONCAT(CEIL(AVG((LEFT(i.cpu_usage , LENGTH(i.cpu_usage)-1 ))::INT) ),'%')as avg_cpu_usage, 
CONCAT (CEIL(AVG((LEFT(i.memory_usage , LENGTH(i.memory_usage)-1 ))::INT)) , '%')as avg_memory_usage,
CONCAT ( CEIL(AVG((LEFT(i.network_usage , LENGTH(i.network_usage)-1 ))::INT)) , '%')as avg_network_usage
FROM networks n join
instances i on n.id = i.network_id 
where n.cidr IN
( SELECT n1.cidr 
FROM instances i1 
join networks n1 
on i1.network_id = n1.id 
group by n1.cidr , 
i1.cpu_usage 
having LEFT(i1.cpu_usage, LENGTH(i1.cpu_usage)-1)::INT > 80 )
group by n.cidr




// 48


-- Create tasks table
CREATE TABLE tasks (
    id INT PRIMARY KEY,
    hash VARCHAR(255) NOT NULL
);

-- Create processes table
CREATE TABLE processes (
    task_id INT REFERENCES tasks(id) ON DELETE CASCADE,
    start_dt VARCHAR(19) NOT NULL,
    end_dt VARCHAR(19) NOT NULL
);

-- Insert data into tasks
INSERT INTO tasks (id, hash) VALUES
(1, '208f95e0fc792f617ade3cebf33ad9'),
(2, '0f44a9ead2f18a7f25425c1260fc74'),
(3, 'dbcf54e94395c32e01ec09a5db731912');

-- Insert data into processes
INSERT INTO processes (task_id, start_dt, end_dt) VALUES
(1, '2023-04-20 02:01:16', '2023-04-20 02:11:35'),
(1, '2023-04-09 15:11:10', '2023-04-09 15:26:43'),
(1, '2023-04-07 23:41:49', '2023-04-08 00:34:10'),

(2, '2023-04-07 23:05:47', '2023-04-08 00:00:05'),
(2, '2023-04-19 18:39:33', '2023-04-19 18:54:57'),
(2, '2023-04-28 13:17:11', '2023-04-28 13:24:37'),
(2, '2023-04-16 00:13:06', '2023-04-16 01:02:39'),
(2, '2023-04-16 15:02:26', '2023-04-16 15:58:14'),
(2, '2023-04-27 02:23:07', '2023-04-27 02:59:13'),
(2, '2023-04-10 23:33:47', '2023-04-11 00:09:35'),
(2, '2023-04-16 17:29:51', '2023-04-16 18:10:22'),
(2, '2023-04-23 12:16:01', '2023-04-23 12:48:07'),

(3, '2023-04-01 02:25:12', '2023-04-01 02:49:26'),
(3, '2023-04-04 03:02:43', '2023-04-04 03:42:03'),
(3, '2023-04-10 22:42:26', '2023-04-10 23:14:42'),
(3, '2023-04-09 17:46:12', '2023-04-09 18:10:19'),
(3, '2023-04-25 15:09:36', '2023-04-25 15:19:54'),
(3, '2023-04-19 14:39:52', '2023-04-19 15:21:23'),
(3, '2023-04-12 04:22:29', '2023-04-12 04:25:10'),
(3, '2023-04-25 07:40:26', '2023-04-25 08:01:30');






SELECT 
t.hash ,

SUM(
COALESCE(  EXTRACT(EPOCH from p.end_dt::timestamp)::INT,0) -
COALESCE (EXTRACT (EPOCH from p.start_dt::timestamp)::INT,0)
)


from 
tasks t
join
processes p 
on 
t.id = p.task_id
group by t.hash  , p.task_id 







//49


-- Create table
CREATE TABLE devices (
    id INT PRIMARY KEY,
    score INT
);

-- Insert sample data
INSERT INTO devices (id, score) VALUES
(1, 20),
(2, 50),
(3, 50),
(4, 68),
(5, 95);


SELECT 
'Device ' || id ||' has class : '||

CASE
WHEN SCORE >=80 then 'A'
WHEN SCORE >=60 then 'B'
WHEN SCORE >=40 then 'C'
WHEN SCORE >= 20 then 'D'
ELSE 'F'

 END as device
 


from devices

order by id






//  50


DROP TABLE accounts


-- Create tables
CREATE TABLE accounts (
    id INT PRIMARY KEY,
    username VARCHAR(255),
    email VARCHAR(255)
);

CREATE TABLE taris (
    id INT PRIMARY KEY,
    name VARCHAR(1) CHECK (name IN ('A','B','C','D','E')),
    cost DECIMAL(4,3)
);

CREATE TABLE readings (
    account_id INT REFERENCES accounts(id),
    tari_id INT REFERENCES taris(id),
    amount SMALLINT
);

-- Insert data into accounts
INSERT INTO accounts (id, username, email) VALUES
(1, 'hshillabeare0', 'rcalkin0@sourceforge.net'),
(2, 'sdandy1', 'agaule1@businessweek.com'),
(3, 'sgreiswood2', 'toppy2@lulu.com');

-- Insert data into taris
INSERT INTO taris (id, name, cost) VALUES
(1, 'A', 0.010),
(2, 'B', 0.020),
(3, 'C', 0.050),
(4, 'D', 0.075),
(5, 'E', 0.100);

-- Insert data into readings
INSERT INTO readings (account_id, tari_id, amount) VALUES
(1, 2, 54),
(1, 3, 19),
(1, 3, 37),
(1, 3, 89),
(1, 3, 119),
(2, 1, 12),
(2, 1, 44),
(2, 1, 81),
(2, 2, 60),
(2, 2, 164),
(2, 2, 199),
(2, 3, 79),
(2, 5, 186),
(3, 1, 31),
(3, 1, 59),
(3, 1, 77),
(3, 1, 95),
(3, 1, 110),
(3, 1, 125),
(3, 2, 31);




SELECT 
    a.username,
    a.email,
	MAX(t.name) FILTER (where t.cost = MAX(t.cost) OVER (PARTITION BY a.id)) AS highest_tari,
	
    SUM(r.amount) AS consumption,
    ROUND (SUM(r.amount * t.cost)) AS total_cost
FROM accounts a
JOIN readings r
    ON a.id = r.account_id
JOIN taris t 
    ON t.id = r.tari_id
GROUP BY a.username, a.email
ORDER BY a.username;











SELECT 
    a.username,
    a.email,
    -- correlated subquery to get the tariff name with the highest cost consumed
    (
        SELECT t2.name
        FROM readings r2
        JOIN taris t2 ON t2.id = r2.tari_id
        WHERE r2.account_id = a.id
        ORDER BY t2.cost DESC
        LIMIT 1
    ) AS highest_tari,
    SUM(r.amount) AS consumption,
    ROUND(SUM(r.amount * t.cost), 2) AS total_cost
FROM accounts a
JOIN readings r
    ON a.id = r.account_id
JOIN taris t
    ON t.id = r.tari_id
GROUP BY a.username, a.email, a.id
ORDER BY a.username;








SELECT 
    a.username,
    a.email,
    MAX(t.name) FILTER (WHERE t.cost = MAX(t.cost) OVER (PARTITION BY a.id)) AS highest_tari,
    SUM(r.amount) AS consumption,
    ROUND(SUM(r.amount * t.cost), 2) AS total_cost
FROM accounts a
JOIN readings r ON a.id = r.account_id
JOIN taris t ON r.tari_id = t.id
GROUP BY a.id, a.username, a.email
ORDER BY a.username;





// 51

-- Create customers table
CREATE TABLE customers (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE
);

-- Create expenses table
CREATE TABLE expenses (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Create income table
CREATE TABLE income (
    customer_id INT,
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Insert customers
INSERT INTO customers (id, email) VALUES
(1, 'otoohey0@elpais.com'),
(2, 'egrebbin1@state.gov'),
(3, 'arides2@sohu.com');

-- Insert expenses
INSERT INTO expenses (customer_id, dt, amount) VALUES
(1, '2024-02-21 22:12:12', 90.41),
(1, '2024-02-27 06:48:37', 792.88),
(1, '2024-03-10 05:19:43', 442.01),
(1, '2024-03-11 19:48:25', 327.35),
(1, '2024-03-24 22:03:06', 639.62),
(1, '2024-03-29 00:37:46', 150.12),
(1, '2024-04-02 03:36:50', 257.67),
(2, '2024-02-21 06:11:26', 400.22),
(2, '2024-03-11 15:34:19', 298.41),
(2, '2024-03-25 04:36:27', 376.87),
(2, '2024-03-29 19:05:51', 530.07),
(2, '2024-03-30 07:07:28', 287.84),
(2, '2024-04-02 15:44:22', 868.03),
(3, '2024-03-01 16:02:47', 33.30),
(3, '2024-03-06 11:53:42', 838.51),
(3, '2024-03-20 23:34:48', 968.08),
(3, '2024-03-21 21:18:08', 35.36),
(3, '2024-03-30 06:51:13', 956.12),
(3, '2024-03-31 10:11:56', 896.32),
(3, '2024-03-31 22:36:57', 740.94);

-- Insert income
INSERT INTO income (customer_id, dt, amount) VALUES
(1, '2024-02-20 21:00:55', 366.66),
(1, '2024-03-11 03:25:04', 769.38),
(1, '2024-03-15 00:49:53', 84.10),
(1, '2024-03-21 18:32:51', 839.48),
(1, '2024-03-29 15:34:13', 333.97),
(1, '2024-04-01 00:34:24', 253.13),
(1, '2024-04-02 11:13:49', 263.56),
(2, '2024-02-20 15:03:26', 822.75),
(2, '2024-02-26 14:57:39', 277.23),
(2, '2024-03-19 09:24:47', 24.08),
(2, '2024-03-20 15:54:24', 988.34),
(2, '2024-04-02 08:28:38', 990.54),
(3, '2024-02-21 10:23:33', 430.82),
(3, '2024-02-29 08:25:32', 482.85),
(3, '2024-03-01 05:10:42', 962.60),
(3, '2024-03-04 08:27:34', 30.21),
(3, '2024-03-19 12:12:01', 80.00),
(3, '2024-03-21 00:32:10', 674.76),
(3, '2024-03-23 14:14:32', 863.79),
(3, '2024-04-09 13:37:07', 51.42);






SELECT 
    c.email,
	 COALESCE(SUM(DISTINCT e.amount),0) AS total_expenses,
    COALESCE(SUM(DISTINCT i.amount),0) AS total_income
  
FROM customers c
LEFT JOIN income i 
    ON c.id = i.customer_id 
    AND EXTRACT(YEAR FROM i.dt::date) = 2024 
    AND EXTRACT(MONTH FROM i.dt::date) = 3
LEFT JOIN expenses e 
    ON c.id = e.customer_id 
    AND EXTRACT(YEAR FROM e.dt::date) = 2024 
    AND EXTRACT(MONTH FROM e.dt::date) = 3
GROUP BY c.email;














//51

-- Table: accounts
CREATE TABLE accounts (
    id INT PRIMARY KEY,
    username VARCHAR(255),
    email VARCHAR(255)
);

-- Table: items
CREATE TYPE item_type AS ENUM ('sword', 'shield', 'armor');
CREATE TABLE items (
    id INT PRIMARY KEY,
    type item_type,
    name VARCHAR(255),
    weight SMALLINT
);


-- Table: accounts_items
CREATE TABLE accounts_items (
    account_id INT,
    item_id INT,
    FOREIGN KEY (account_id) REFERENCES accounts(id),
    FOREIGN KEY (item_id) REFERENCES items(id)
);






-- Insert into accounts
INSERT INTO accounts (id, username, email) VALUES
(1, 'esoane0', 'alefwich0@nytimes.com'),
(2, 'jrafter1', 'bmcniff@census.gov'),
(3, 'rcawston2' ,'fnikoll@flickerr.com');  -- Assuming username is missing

-- Insert into items
INSERT INTO items (id, type, name, weight) VALUES
(1, 'shield', 'Shield of Asteraceae', 3),
(2, 'sword', 'Sword of Cyperaceae', 3),
(3, 'shield', 'Shield of Apiaceae', 3),
(4, 'sword', 'Sword of Onagraceae', 3),
(5, 'sword', 'Sword of Campanulaceae', 3);

-- Insert into accounts_items
INSERT INTO accounts_items (account_id, item_id) VALUES
(1, 2), (1, 3), (1, 3), (1, 4), (1, 4), (1, 5), (1, 5), (1, 5),
(2, 1), (2, 1), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 3), (2, 3), (2, 5),
(3, 3), (3, 4);








select 
a.username,
a.email,
COUNT(*) as total_items,
(COUNT(*) * i.weight) as total_weight
from 
accounts a 
join 
accounts_items ai
on a.id = ai.account_id
join items i
on i.id  = ai.item_id

group by a.username,a.email, i.weight
having 
(COUNT(*) * i.weight) >  20





// 52


-- Table: cities
CREATE TABLE cities (
    id INT PRIMARY KEY,
    name VARCHAR(255)
);

-- Table: banners
CREATE TABLE banners (
    city_id INT,
    width SMALLINT,
    height SMALLINT,
    FOREIGN KEY (city_id) REFERENCES cities(id)
);




-- Insert into cities
INSERT INTO cities (id, name) VALUES
(1, 'Kayu Agung'),
(2, 'Yangkou'),
(3, 'Marseille');

-- Insert into banners
INSERT INTO banners (city_id, width, height) VALUES
(3, 6, 20),
(1, 20, 14),
(1, 6, 17),
(1, 15, 6),
(2, 16, 8),
(2, 6, 7),
(3, 6, 9),
(1, 20, 16),
(3, 19, 14),
(2, 9, 17),
(2, 8, 12),
(1, 12, 16),
(3, 15, 14),
(3, 11, 7),
(3, 6, 14),
(2, 12, 7),
(3, 7, 20),
(1, 13, 6),
(3, 10, 13),
(2, 19, 15);




SELECT 
c.name,
COUNT(*) as total_banners,

MIN(b.width * b.height) as min1_area,
CEIL(AVG(b.width * b.height)) as avg_Area, 
MAX(b.width * b.height) as max_area,
SUM(b.width * b.height) as total_area
FROM 
cities c
join banners b 
on c.id = b.city_id
group by c.name
order by c.name



// 53



CREATE TABLE lots (
    id INT PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE offers (
    lot_id INT REFERENCES lots(id) ON DELETE CASCADE,
    amount DECIMAL(6,2)
);


INSERT INTO lots (id, name) VALUES
(1, 'Merremia quinquefolia (L.) Hallier f.'),
(2, 'Plantago maritima L.'),
(3, 'Hohenbergia antillana Mez'),
(4, 'Penstemon eriantherus Pursh var. argillosus M.E. Jones');



INSERT INTO offers (lot_id, amount) VALUES
(1, 510.51),
(2, 703.80),
(2, 181.80),
(1, 38.06),
(2, 368.78),
(3, 91.40),
(2, 413.80),
(3, 157.99),
(3, 885.82),
(2, 863.99),
(1, 307.61),
(2, 120.39),
(1, 771.96),
(2, 801.42),
(3, 871.59),
(1, 541.61),
(3, 477.62),
(2, 303.29),
(2, 612.83),
(3, 464.98);



SELECT * FROM offers


SELECT * FROM lots



SELECT 
l.name,
COUNT(o.amount)   as  total_offers,
min(o.amount)  as min_offer,
ROUND(avg(o.amount),2) as avg_offer,
max(o.amount) as max_offer
from lots l  
left join 
offers o 
on l.id = o.lot_id
group by l.name

order by COUNT(*) desc











// 50 
   DROP TABLE ACCOUNTS
   


CREATE TABLE account (
    id INT PRIMARY KEY,
    username VARCHAR(255),
    email VARCHAR(255)
);

CREATE TABLE taris (
    id INT PRIMARY KEY,
    name VARCHAR(1) CHECK (name IN ('A','B','C','D','E')),
    cost DECIMAL(4,3)
);

CREATE TABLE readings (
    account_id INT REFERENCES account(id),
    tari_id INT REFERENCES taris(id),
    amount SMALLINT
);

-- Insert data into accounts
INSERT INTO account (id, username, email) VALUES
(1, 'hshillabeare0', 'rcalkin0@sourceforge.net'),
(2, 'sdandy1', 'agaule1@businessweek.com'),
(3, 'sgreiswood2', 'toppy2@lulu.com');

-- Insert data into taris
INSERT INTO taris (id, name, cost) VALUES
(1, 'A', 0.010),
(2, 'B', 0.020),
(3, 'C', 0.050),
(4, 'D', 0.075),
(5, 'E', 0.100);

-- Insert data into readings
INSERT INTO readings (account_id, tari_id, amount) VALUES
(1, 2, 54),
(1, 3, 19),
(1, 3, 37),
(1, 3, 89),
(1, 3, 119),
(2, 1, 12),
(2, 1, 44),
(2, 1, 81),
(2, 2, 60),
(2, 2, 164),
(2, 2, 199),
(2, 3, 79),
(2, 5, 186),
(3, 1, 31),
(3, 1, 59),
(3, 1, 77),
(3, 1, 95),
(3, 1, 110),
(3, 1, 125),
(3, 2, 31);




select 

a.username,
a.email,

select (

t2.name

from readings r2 join taris t2
on r2.tari_id = t2.id

where r2.account_id = a.id

)   as highest_tari, 
sum(r.amount) as total_consumpition,
sum(r.amount * t.cost)  as total 

FROM 
accounts  a
join readings r on a.id = r.account_id
join taris t on t.id = r.tari_id
group by a.username , a.email , a.id
order by a.username















SELECT 
    a.username,
    a.email,
    -- correlated subquery to get the tariff name with the highest cost consumed
    (
        SELECT t2.name
        FROM readings r2
        JOIN taris t2 ON t2.id = r2.tari_id
        WHERE r2.account_id = a.id
        ORDER BY t2.cost DESC
        LIMIT 1
    ) AS highest_tari,
    SUM(r.amount) AS consumption,
    ROUND(SUM(r.amount * t.cost), 2) AS total_cost
FROM accounts a
JOIN readings r
    ON a.id = r.account_id
JOIN taris t
    ON t.id = r.tari_id
GROUP BY a.username, a.email, a.id
ORDER BY a.username;






SELECT 
    a.username,
    a.email,
	MAX(t.name)
 as highest_tari , 
    SUM(r.amount) AS consumption,
    ROUND(SUM(r.amount * t.cost), 2) AS total_cost
FROM accounts a
JOIN readings r
    ON a.id = r.account_id
JOIN taris t
    ON t.id = r.tari_id
GROUP BY a.username, a.email, a.id
ORDER BY a.username;






   -- correlated subquery to get the tariff name with the highest cost consumed
    -- (
    --     SELECT t2.name
    --     FROM readings r2
    --     JOIN taris t2 ON t2.id = r2.tari_id
    --     WHERE r2.account_id = a.id
    --     ORDER BY t2.cost DESC
    --     LIMIT 1
    -- ) AS highest_tari,



























	


SELECT 
    a.username,
    a.email,
    -- correlated subquery to get the tariff name with the highest cost consumed
    (
        SELECT t2.name
        FROM readings r2
        JOIN taris t2 ON t2.id = r2.tari_id
        WHERE r2.account_id = a.id
        ORDER BY t2.cost DESC
        LIMIT 1
    ) AS highest_tari,
    SUM(r.amount) AS consumption,
    ROUND(SUM(r.amount * t.cost), 2) AS total_cost
FROM accounts a
JOIN readings r
    ON a.id = r.account_id
JOIN taris t
    ON t.id = r.tari_id
GROUP BY a.username, a.email, a.id
ORDER BY a.username;












// 54









INSERT INTO accountp (id, first_name, last_name, iban) VALUES
(1, 'Alex', 'Cantua', 'IL29 9590 1551 0650 0553 712'),
(2, 'Chris', 'Lashmore', 'AZ54 CNUI 0107 KEXZ ASKY QW4M FBJI'),
(3, 'Taylor', 'Blum', 'HR20 2041 7741 5014 9873 9'),
(4, 'Robin', 'Neachell', 'NL87 PPCD0429184992'),
(5, 'Drew', 'Barbier', 'FR727843399042WMQQ8PGVNNF78');






-- Table: accounts
CREATE TABLE accountp (
    id INT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    iban VARCHAR(255)
);

-- Table: declarations
CREATE TABLE declarations (
    account_id INT REFERENCES accountp(id),
    quarter VARCHAR(2) CHECK (quarter IN ('Q1', 'Q2', 'Q3', 'Q4')),
    income DECIMAL(7,2)
);




INSERT INTO declarations (account_id, quarter, income) VALUES
(1, 'Q1', 49235.67),
(1, 'Q2', 46653.11),
(1, 'Q3', 63739.99),
(1, 'Q4', 43222.54),
(2, 'Q1', 69743.50),
(2, 'Q2', 29641.01),
(2, 'Q3', 97725.49),
(2, 'Q4', 91481.98),
(3, 'Q1', 68402.43),
(3, 'Q2', 12660.12),
(3, 'Q3', 59601.65),
(3, 'Q4', 54701.74),
(4, 'Q1', 55220.27),
(4, 'Q2', 87752.41),
(4, 'Q3', 44447.06),
(4, 'Q4', 45876.26),
(5, 'Q1', 42511.74),
(5, 'Q2', 22022.78),
(5, 'Q3', 88396.81),
(5, 'Q4', 67252.54);

SELECT * FROM declarations

SELECT 
CONCAT(a.last_name , ' ', a.first_name) as full_name , 
a.iban,
(SUM(d.income )) as total_taxable_income,
'10%' as rate,

SUM(d.income * 0.1)




FROM 
accountp a
join declarations d
on a.id = d.account_id
WHERE d.quarter IN ('Q1', 'Q2','Q3','Q4')
group by full_name , a.iban







// 55

CREATE TABLE proles (
    id INT PRIMARY KEY,
    rst_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(255)
);

-- Create table: relations
CREATE TABLE relations (
    prole_id INT,
    related_to VARCHAR(255),
    is_approved BOOLEAN,
    FOREIGN KEY (prole_id) REFERENCES proles(id)
);

-- Insert data into proles
INSERT INTO proles (id, rst_name, last_name, email) VALUES
(1, 'Shayne', 'Shilito', 'sshilito0@ftc.gov'),
(2, 'Shell', 'Shade', 'sshade1@paginegialle.it'),
(3, 'Nobie', 'Splain', 'nsplain2@npr.org');

-- Insert data into relations
INSERT INTO relations (prole_id, related_to, is_approved) VALUES
(1, 'cbasinigazzii', TRUE),
(1, 'ldevered', TRUE),
(1, 'edeniskeb', TRUE),
(1, 'cstirland4', TRUE),
(1, 'ngooddiea', TRUE),
(1, 'alockney7', TRUE),
(1, 'jsorrillj', FALSE),
(1, 'bnodin3', FALSE),
(1, 'dwall2', FALSE),
(1, 'folivas1', FALSE),
(2, 'ksharland6', FALSE),
(2, 'pbarosch8', FALSE),
(2, 'smacieja9', FALSE),
(2, 'bbrasonf', FALSE),
(2, 'dabrahartg', FALSE),
(3, 'gaymer5', TRUE),
(3, 'rwoolcockse', TRUE),
(3, 'egilyott0', TRUE),
(3, 'agillionc', FALSE),
(3, 'fgribbinh', FALSE);






SELECT 
p.last_name || ' ' || p.rst_name   as full_name,
p.email as email,
COUNT(*) as total_relations,
COUNT(*) FILTER(where r.is_approved = TRUE) as approved ,
COUNT(*) FILTER (where r.is_approved = FALSE) as rejected
FROM 

proles p 
join relations r
 on p.id = r.prole_id


 group by full_name,  p.email
 order by full_name









