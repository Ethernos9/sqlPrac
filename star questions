// 32



-- 1. Create products table
CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- 2. Create sales table
CREATE TABLE sales (
    product_id INT REFERENCES products(id),
    dt TIMESTAMP NOT NULL,
    amount DECIMAL(7,2) NOT NULL
);

-- 3. Insert products data
INSERT INTO products (id, name) VALUES
(1, 'Luxury Gold Watch'),
(2, 'Smartphone Holder Stand'),
(3, 'Stainless Steel Water Bottle');

-- 4. Insert sales data
INSERT INTO sales (product_id, dt, amount) VALUES
(1, '2024-01-13 17:12:22', 7008.16),
(1, '2024-01-03 03:15:27', 6191.64),
(1, '2024-01-22 18:29:09', 4527.86),
(1, '2024-01-26 19:38:53', 7828.36),
(1, '2024-02-17 09:27:13', 5273.16),
(1, '2024-02-11 09:51:24', 3364.73),
(1, '2024-02-22 23:53:15', 8584.33),
(2, '2024-01-28 11:33:58', 3710.06),
(2, '2024-01-25 14:47:25', 5221.02),
(2, '2024-01-21 07:58:53', 2525.72),
(2, '2024-03-15 14:16:18', 8158.08),
(2, '2024-03-12 17:02:01', 6760.77),
(3, '2024-01-13 19:27:51', 1942.79),
(3, '2024-02-15 08:04:40', 9186.38),
(3, '2024-03-06 08:02:37', 5821.97),
(3, '2024-03-03 15:39:18', 8676.24),
(2, '2024-04-08 09:53:01', 6327.20),
(1, '2023-12-26 05:48:22', 8360.43),
(1, '2023-12-15 14:52:51', 9101.30),
(3, '2023-12-21 15:57:50', 3857.98);



















SELECT 

p.name ,

CASE

EXTRACT(month from s.dt::date) 
when 1
then 'January'
when 2
 then 'February'
 when 3
 then 'March'
end as month_name , 


SUM(s.amount) as total_sales 


from products p 
join sales s 
on p.id = s.product_id
where EXTRACT (YEAR FROM s.dt::date) = 2024
and extract (month from s.dt::date) in (1,2,3) 


group by p.name, EXTRACT (month from s.dt::date)



order by  EXTRACT (month from s.dt::date) ,  total_sales DESC








SELECT 
    p.name,
    TO_CHAR(s.dt::date, 'Month') AS month_name,
    SUM(s.amount) AS total_sales
FROM products p
JOIN sales s 
    ON p.id = s.product_id
WHERE EXTRACT(YEAR FROM s.dt::date) = 2024
  AND EXTRACT(MONTH FROM s.dt::date) IN (1,2,3)
GROUP BY p.name, month_name , EXTRACT(MONTH FROM s.dt::date)
ORDER BY EXTRACT(MONTH FROM s.dt::date), total_sales DESC;





// 75





-- Create table
CREATE TABLE RESULT (
    id INT PRIMARY KEY,
    first_name VARCHAR(20),
    last_name VARCHAR(20),
    cgpa_first_year FLOAT,
    cgpa_second_year FLOAT,
    cgpa_third_year FLOAT,
    cgpa_fourth_year FLOAT
);

-- Insert data
INSERT INTO RESULT (id, first_name, last_name, cgpa_first_year, cgpa_second_year, cgpa_third_year, cgpa_fourth_year)
VALUES
(1, 'Pearlene', 'Beane', 7.0, 5.1, 8.4, 8.9),
(2, 'Franklin', 'Nolf', 7.7, 7.2, 5.2, 8.3),
(3, 'Bell', 'Chatmon', 7.3, 8.4, 8.9, 10.0),
(4, 'Belva', 'Hansard', 6.2, 9.2, 5.8, 6.7),
(5, 'Missy', 'Days', 8.3, 10.0, 7.3, 6.7),
(6, 'Vicenta', 'Criss', 5.4, 9.5, 6.1, 9.0),
(7, 'Annelle', 'Waugh', 6.5, 7.9, 9.6, 9.3),
(8, 'Darby', 'Canty', 5.5, 9.0, 8.6, 5.9),
(9, 'Ka', 'Hawbaker', 5.7, 6.4, 5.2, 6.8),
(10, 'Alease', 'Blackston', 5.3, 7.5, 9.3, 6.0);




SELECT 
first_name || ' ' ||  last_name as full_name,

Round((cgpa_first_year + cgpa_second_year + cgpa_third_year + cgpa_fourth_year)/4.0),1) as result


FROM 


result 

group by  result , full_name





SELECT 
    first_name || ' ' || last_name AS full_name,
    ROUND(
        ((cgpa_first_year + cgpa_second_year + cgpa_third_year + cgpa_fourth_year) / 4.0)::numeric,
        1
    ) AS average_gpa
FROM RESULTS
ORDER BY average_gpa DESC, full_name;







