// 32



-- 1. Create products table
CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- 2. Create sales table
CREATE TABLE sales (
    product_id INT REFERENCES products(id),
    dt TIMESTAMP NOT NULL,
    amount DECIMAL(7,2) NOT NULL
);

-- 3. Insert products data
INSERT INTO products (id, name) VALUES
(1, 'Luxury Gold Watch'),
(2, 'Smartphone Holder Stand'),
(3, 'Stainless Steel Water Bottle');

-- 4. Insert sales data
INSERT INTO sales (product_id, dt, amount) VALUES
(1, '2024-01-13 17:12:22', 7008.16),
(1, '2024-01-03 03:15:27', 6191.64),
(1, '2024-01-22 18:29:09', 4527.86),
(1, '2024-01-26 19:38:53', 7828.36),
(1, '2024-02-17 09:27:13', 5273.16),
(1, '2024-02-11 09:51:24', 3364.73),
(1, '2024-02-22 23:53:15', 8584.33),
(2, '2024-01-28 11:33:58', 3710.06),
(2, '2024-01-25 14:47:25', 5221.02),
(2, '2024-01-21 07:58:53', 2525.72),
(2, '2024-03-15 14:16:18', 8158.08),
(2, '2024-03-12 17:02:01', 6760.77),
(3, '2024-01-13 19:27:51', 1942.79),
(3, '2024-02-15 08:04:40', 9186.38),
(3, '2024-03-06 08:02:37', 5821.97),
(3, '2024-03-03 15:39:18', 8676.24),
(2, '2024-04-08 09:53:01', 6327.20),
(1, '2023-12-26 05:48:22', 8360.43),
(1, '2023-12-15 14:52:51', 9101.30),
(3, '2023-12-21 15:57:50', 3857.98);



















SELECT 

p.name ,

CASE

EXTRACT(month from s.dt::date) 
when 1
then 'January'
when 2
 then 'February'
 when 3
 then 'March'
end as month_name , 


SUM(s.amount) as total_sales 


from products p 
join sales s 
on p.id = s.product_id
where EXTRACT (YEAR FROM s.dt::date) = 2024
and extract (month from s.dt::date) in (1,2,3) 


group by p.name, EXTRACT (month from s.dt::date)



order by  EXTRACT (month from s.dt::date) ,  total_sales DESC








SELECT 
    p.name,
    TO_CHAR(s.dt::date, 'Month') AS month_name,
    SUM(s.amount) AS total_sales
FROM products p
JOIN sales s 
    ON p.id = s.product_id
WHERE EXTRACT(YEAR FROM s.dt::date) = 2024
  AND EXTRACT(MONTH FROM s.dt::date) IN (1,2,3)
GROUP BY p.name, month_name , EXTRACT(MONTH FROM s.dt::date)
ORDER BY EXTRACT(MONTH FROM s.dt::date), total_sales DESC;





// 75





-- Create table
CREATE TABLE RESULT (
    id INT PRIMARY KEY,
    first_name VARCHAR(20),
    last_name VARCHAR(20),
    cgpa_first_year FLOAT,
    cgpa_second_year FLOAT,
    cgpa_third_year FLOAT,
    cgpa_fourth_year FLOAT
);

-- Insert data
INSERT INTO RESULT (id, first_name, last_name, cgpa_first_year, cgpa_second_year, cgpa_third_year, cgpa_fourth_year)
VALUES
(1, 'Pearlene', 'Beane', 7.0, 5.1, 8.4, 8.9),
(2, 'Franklin', 'Nolf', 7.7, 7.2, 5.2, 8.3),
(3, 'Bell', 'Chatmon', 7.3, 8.4, 8.9, 10.0),
(4, 'Belva', 'Hansard', 6.2, 9.2, 5.8, 6.7),
(5, 'Missy', 'Days', 8.3, 10.0, 7.3, 6.7),
(6, 'Vicenta', 'Criss', 5.4, 9.5, 6.1, 9.0),
(7, 'Annelle', 'Waugh', 6.5, 7.9, 9.6, 9.3),
(8, 'Darby', 'Canty', 5.5, 9.0, 8.6, 5.9),
(9, 'Ka', 'Hawbaker', 5.7, 6.4, 5.2, 6.8),
(10, 'Alease', 'Blackston', 5.3, 7.5, 9.3, 6.0);




SELECT 
first_name || ' ' ||  last_name as full_name,

Round((cgpa_first_year + cgpa_second_year + cgpa_third_year + cgpa_fourth_year)/4.0),1) as result


FROM 


result 

group by  result , full_name





SELECT 
    first_name || ' ' || last_name AS full_name,
    ROUND(
        ((cgpa_first_year + cgpa_second_year + cgpa_third_year + cgpa_fourth_year) / 4.0)::numeric,
        1
    ) AS average_gpa
FROM RESULTS
ORDER BY average_gpa DESC, full_name;














// 82
-- Table for Families
CREATE TABLE FAMILIES (
    ID VARCHAR(50) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    FAMILY_SIZE INT NOT NULL
);

-- Table for Countries
CREATE TABLE COUNTRIES (
    ID VARCHAR(50) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    MIN_SIZE INT NOT NULL
);





-- Insert data into FAMILIES
INSERT INTO FAMILIES (ID, NAME, FAMILY_SIZE) VALUES
('c00dac11bde74750b4d207b9c182a85f', 'Alex Thomas', 9),
('eb6f2d3426694667ae3e79d6274114a4', 'Chris Gray', 2);

-- Insert data into COUNTRIES
INSERT INTO COUNTRIES (ID, NAME, MIN_SIZE) VALUES
('023fd23615bd4ff4b2ae0a13ed7efec9', 'Bolivia', 2),
('be247f73de0f4b2d810367cb26941fb9', 'Cook Islands', 4),
('3e85ab80a6f84ef3b9068b21dbcc54b3', 'Brazil', 4);



SELECT MAX(discounted_tours)as max_dis

from 
(

SELECT 
f.id, 
f.name,
COUNT(c.id) as discounted_tours

FROM 
families f
cross join 
countries c

where 
f.family_size>=c.min_size
group by f.id , f.name



) as family_tours






// 83




-- Table for FRIENDS
CREATE TABLE FRIEND (
    ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    ACTIVITY VARCHAR(100) NOT NULL
);

-- Table for ACTIVITIES
CREATE TABLE ACTIVITIE(
    ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL
);
-- Insert into FRIENDS
INSERT INTO FRIEND (ID, NAME, ACTIVITY) VALUES
(1, 'James Smith', 'Horse Riding'),
(2, 'Eric Jenkins', 'Eating'),
(3, 'Sean Cox', 'Eating'),
(4, 'Eric Schmidt', 'Horse Riding'),
(5, 'Chris Evans', 'Eating'),
(6, 'Jessica Breeds', 'Playing');

-- Insert into ACTIVITIES
INSERT INTO ACTIVITIE (ID, NAME) VALUES
(1, 'Horse Riding'),
(2, 'Eating'),
(3, 'Playing');




-- SELECT MAX(max_count) from (


-- SELECT 
-- activity,
-- COUNT(*) as max_count
-- from friend f
-- group by  activity


-- ) as maxn






SELECT activity_counts.NAME
FROM (
    SELECT a.NAME, COUNT(f.ID) AS participants
    FROM ACTIVITIE a
    JOIN FRIEND f ON a.NAME = f.ACTIVITY
    GROUP BY a.NAME
) AS activity_counts
WHERE participants NOT IN (
    (SELECT MAX(cnt) FROM (
        SELECT COUNT(f.ID) AS cnt
        FROM ACTIVITIE a
        JOIN FRIEND f ON a.NAME = f.ACTIVITY
        GROUP BY a.NAME
    ) AS max_sub),
    (SELECT MIN(cnt) FROM (
        SELECT COUNT(f.ID) AS cnt
        FROM ACTIVITIE a
        JOIN FRIEND f ON a.NAME = f.ACTIVITY
        GROUP BY a.NAME
    ) AS min_sub)
);





// 84



CREATE TABLE CUSTOMERP (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    visited_on DATE NOT NULL,
    amount INT NOT NULL
);


INSERT INTO CUSTOMERP (id, name, phone, visited_on, amount) VALUES
(1, 'Julia', '1234567890', '2015-05-01', 100),
(2, 'Samantha', '1234567890', '2015-05-02', 200),
(3, 'Julia-Samantha', '1234567890', '2015-05-03', 300);



with daily_spending as (
  select visited_on , 
  sum(amount) as amount
  from customerp 
  group by visited_on
)


select 

visited_on,
amount,
ROUND(AVG(amount)OVER (
order by visited_on
rows between 6 preceding
and current row
)) as avg_amount












WITH daily_spending AS (
    SELECT visited_on, SUM(amount) AS amount
    FROM CUSTOMERS
    GROUP BY visited_on
)
SELECT 
    visited_on,
    amount,
    ROUND(AVG(amount) OVER (
        ORDER BY visited_on
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ), 2) AS avg_amount
FROM daily_spending
ORDER BY visited_on;





// 93


-- Create DEPARTMENT table
CREATE TABLE DEPARTMENT (
    ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL
);

-- Insert data into DEPARTMENT
INSERT INTO DEPARTMENT (ID, NAME) VALUES
(3, 'Biological Sciences'),
(5, 'Technology'),
(6, 'Humanities & Social Sciences'),
(2, 'Clinical Medicine'),
(4, 'Arts and Humanities'),
(1, 'Physical Sciences');

-- Create PROFESSOR table
CREATE TABLE PROFESSOR (
    ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DEPARTMENT_ID INT,
    SALARY INT,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(ID)
);

-- Insert data into PROFESSOR
INSERT INTO PROFESSOR (ID, NAME, DEPARTMENT_ID, SALARY) VALUES
(1, 'Shauna Rivera', 1, 22606),
(8, 'Ruth Price', 3, 9287),
(9, 'Julie Gonzalez', 4, 18870),
(2, 'Craig Elliott', 5, 27524),
(10, 'Scott Butler', 1, 26200),
(3, 'Nancy Russell', 2, 7076),
(4, 'Clarence Johnson', 1, 7249),
(7, 'Louis Schmidt', 1, 13437),
(5, 'Terri Thompson', 3, 28432),
(6, 'Keith Gilbert', 5, 12610);



SELECT p.NAME, p.SALARY
FROM PROFESSOR p
JOIN DEPARTMENT d ON p.DEPARTMENT_ID = d.ID
WHERE d.NAME <> 'Arts and Humanities'
  AND p.SALARY > (
      SELECT MIN(salary)
      FROM PROFESSOR
      WHERE DEPARTMENT_ID = (
          SELECT ID
          FROM DEPARTMENT
          WHERE NAME = 'Arts and Humanities'
      )
  );




// 90 






CREATE TABLE COLLECTION (
    RED INT,
    GREEN INT,
    BLUE INT
);



INSERT INTO COLLECTION (RED, GREEN, BLUE) VALUES
(65, 65, 87),
(50, 50, 50),
(30, 50, 100),
(40, 50, 90),
(92, 50, 50);




SELECT 
case 
when RED = GREEN and GREEN = BLUE then 'GOOD'
WHEN (RED = GREEN and RED !=BLUE)
OR(RED = BLUE AND RED !=GREEN )
or(GREEN = BLUE AND GREEN != RED) THEN 'BAD'

else 'WORSE'
end as type_of
from collection






