//1 


CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    payment_method VARCHAR(255),
    amount DECIMAL(10, 2),
    transaction_date DATE,
    status VARCHAR(255)
);



INSERT INTO transactions (transaction_id, user_id, payment_method, amount, transaction_date, status) VALUES
(101, 202, 'Credit Card', 200.43, '2025-02-16', 'Completed'),
(102, 203, 'Netbanking', 3233.10, '2025-03-11', 'Failed'),
(103, 203, 'Netbanking', 1195.35, '2025-02-24', 'Failed'),
(104, 203, 'Debit Card', 376.11, '2025-03-10', 'Failed'),
(105, 203, 'Netbanking', 112.01, '2025-04-04', 'Failed'),
(106, 203, 'Credit Card', 111.10, '2025-09-12', 'Failed'),
(107, 203, 'Debit Card', 2344.50, '2025-10-03', 'Failed');



select * from transactions;



SELECT user_id,COUNT(*)as failed_transactions , COUNT (DISTINCT payment_method) FROM transactions where status ='Failed' group by user_id HAVING count(*)>5 ;




CREATE TABLE support_tickets (
    id SERIAL PRIMARY KEY,
    customer_id INT NOT NULL,
    created_at TIMESTAMP NOT NULL,
    resolved_at TIMESTAMP
);



INSERT INTO support_tickets (id, customer_id, created_at, resolved_at)
VALUES
(1, 1, '2023-12-21 05:42:00', '2024-01-01 05:42:00'),
(2, 2, '2023-07-08 14:22:00', NULL),
(3, 3, '2023-05-22 08:54:00', '2023-06-17 08:54:00');



SELECT * from support_tickets;




















//3


CREATE TABLE customers (
    id INT PRIMARY KEY,
    name VARCHAR(255),
    city VARCHAR(255)
);




CREATE TABLE orders (
    id INT PRIMARY KEY,
    customer_id INT,
    amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);



INSERT INTO customers (id, name, city) VALUES
(1, 'Customer 1', 'Los Angeles'),
(2, 'Customer 2', 'Chicago'),
(3, 'Customer 3', 'Chicago');

-- Insert data into orders
INSERT INTO orders (id, customer_id, amount) VALUES
(1, 1, 150.75),
(2, 2, 230.50),
(3, 3, 345.25);










// 4


CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    is_available INT
);


CREATE TABLE requests (
    product_id INT,
    client_email VARCHAR(100),
    FOREIGN KEY (product_id) REFERENCES products(id)
);





INSERT INTO products (id, name, category, is_available) VALUES
(1, 'PromoPro', 'beauty products', 1),
(2, 'AdVantage', 'outdoor gear', 1),
(3, 'MarketMagnet', 'sports equipment', 1),
(5, 'AdBlitz', 'beauty products', 0);





INSERT INTO requests (product_id, client_email) VALUES
-- (1, 'salgate1@fc2.com'),
-- (1, 'lwycliff6@list-manage.com'),
-- (1, 'ekimbleyf@scientificamerican.com'),
-- (2, 'bgooro@spotify.com'),
(2, 'bgooroa@spotify.com'),
(2, 'bgoorop@spotify.com')
-- (2, 'vsamwayest@bbb.org'),
-- (3, 'apappin0@yellowbook.com'),
-- (3, 'ringreyb@businessinsider.com'),
-- (3, 'mrysonm@istockphoto.com'),
-- (5, 'ayushin1c@opera.com');



SELECT p.name ,COUNT(*)
from products p join requests r on p.id = r.product_id
WHERE p.is_available = 1 group by p.name order by 
COUNT(*) DESC ,p.name 





//5 

CREATE TABLE campaigns (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    is_active INT
);



CREATE TABLE engagements (
    campaign_id INT,
    views INT,
    clicks INT,
    FOREIGN KEY (campaign_id) REFERENCES campaigns(id)
);


INSERT INTO campaigns (id, name, is_active) VALUES
(1, 'SummerSavings', 1),
(2, 'FallFrenzy', 1),
(3, 'WinterWonderland', 0);



INSERT INTO engagements (campaign_id, views, clicks) VALUES
(1, 100, 10),
(1, 150, 20),
(2, 200, 30),
(2, 250, 40),
(3, 300, 50),
(1, 120, 15);



SELECT c.name ,COUNT(e.campaign_id)as total_enagements, (SUM(e.views) +  SUM(e.clicks))
FROM campaigns c JOIN engagements e ON c.id = e.campaign_id WHERE is_active=1
 group by c.name







// 6


-- Create accounts table
CREATE TABLE accounts (
    id INT PRIMARY KEY,
    email VARCHAR(255)
);

-- Create reports table
CREATE TABLE reports (
    account_id INT,
    dt VARCHAR(19),
    amount DECIMAL(6, 2),
    FOREIGN KEY (account_id) REFERENCES accounts(id)
);

-- Insert data into accounts table
INSERT INTO accounts (id, email) VALUES
(1, 'hratke0@disqus.com'),
(2, 'lcaiger1@si.edu'),
(3, 'gburkett2@vinaora.com');

-- Insert data into reports table
INSERT INTO reports (account_id, dt, amount) VALUES
(1, '2023-05-27 01:46:19', 830.45),
(2, '2023-01-15 09:23:21', 2518.18),
(3, '2023-05-08 01:44:41', 4637.39),
(1, '2023-06-30 15:02:03', 3953.69),
(2, '2023-12-05 04:39:31', 3357.99),
(3, '2023-02-03 09:41:00', 1907.38),
(1, '2022-12-30 04:05:57', 1217.29),
(2, '2024-01-24 14:18:07', 2441.66),
(3, '2024-01-05 23:19:31', 3055.20),
(1, '2023-05-26 01:54:24', 2077.36);



SELECT a.email, ROUND(SUM(s.amount),2) FROM accounts a 
JOIN reports s on a.id = s.account_id
WHERE EXTRACT(YEAR FROM s.dt::date)=2023
group by a.email
order by a.email;




// 7 

CREATE TABLE devices (
    id INT NOT NULL PRIMARY KEY,
    mac_address VARCHAR(255)
);

-- Create scanned_files table
CREATE TABLE scanned_files (
    device_id INT,
    filename VARCHAR(255),
    is_infected SMALLINT,
    FOREIGN KEY (device_id) REFERENCES devices(id)
);

INSERT INTO devices (id, mac_address) VALUES
(1, '66-0F-84-41-B8-8E'),
(2, 'A6-1A-2F-3A-7B-83'),
(3, '76-CD-24-48-F0-DD');



INSERT INTO scanned_files (device_id, filename, is_infected) VALUES
(1, 'File1.mp3', 0),
(1, 'File2.xls', 1),
(2, 'File3.doc', 0),
(2, 'File4.ppt', 1),
(2, 'File5.mp3', 1),
(3, 'File6.xls', 0),
(3, 'File7.doc', 1),
(3, 'File8.ppt', 0),
(3, 'File9.mp3', 1),
(3, 'File10.xls', 0);


SELECT  d.mac_address, COUNT (s.device_id), SUM(CASE when s.is_infected=1 then 1 else 0 end) 
FROM devices d join scanned_files s on d.id = s.device_id    
group by d.mac_address order by d.mac_address





// 8 -- ===================================
-- CREATE TABLES
-- ===================================

-- Create coins table
CREATE TABLE coins (
    id INT NOT NULL PRIMARY KEY,
    name VARCHAR(255)
);

-- Create transactions table
CREATE TABLE transaction (
    coin_id INT,
    dt VARCHAR(19),
    amount DECIMAL(5, 2),
    FOREIGN KEY (coin_id) REFERENCES coins(id)
);

-- ===================================
-- INSERT DATA
-- ===================================

-- Insert data into coins table
INSERT INTO coins (id, name) VALUES
(1, 'BitCash'),
(2, 'Etherium'),
(3, 'Litecoin');

-- Insert data into transactions table
INSERT INTO transaction (coin_id, dt, amount) VALUES
(2, '2022-12-16 20:42:10', 45.54),
(2, '2023-11-05 09:27:11', 53.30),
(3, '2023-12-05 06:45:23', 71.51),
(3, '2023-01-19 01:43:25', 97.18),
(3, '2024-01-24 13:34:00', 86.68),
(1, '2023-05-07 05:30:06', 25.60),
(2, '2023-03-08 08:07:20', 40.11),
(3, '2023-08-13 10:44:54', 87.54);


SELECT * FROM transaction



SELECT c.name, ROUND(SUM(t.amount),2),COUNT (*)
FROM coins c join 
transaction t  
on c.id = t.coin_id 
WHERE EXTRACT (YEAR FROM t.dt::date)= 2023
group by c.name


// 9 



CREATE TABLE customer (
    id INT NOT NULL PRIMARY KEY,
    email VARCHAR(255)
);

CREATE TABLE domains (
    customer_id INT,
    name VARCHAR(255),
    FOREIGN KEY (customer_id) REFERENCES customer(id)
);


INSERT INTO customer (id, email) VALUES
(1, 'ebayldon0@washingtonpost.com'),
(2, 'agammade1@comcast.net'),
(3, 'goloshkin2@reference.com'),
(4, 'cantonescu3@earthlink.net'),
(5, 'fparzis4@ow.ly'),
(6, 'cpetroulis5@shutterfly.com'),
(7, 'tbeels6@bbb.org'),
(8, 'zmacturlough7@4shared.com'),
(9, 'eshury8@skype.com'),
(10, 'jfehners9@github.io');


INSERT INTO domains (customer_id, name) VALUES
(1, 'bfilipa.net'),
(1, 'gsparsholti.net'),
(1, 'jhughsr.org'),
(2, 'scopas8.net'),
(2, 'cglison1u.org'),
(3, 'tginiz.com'),
(3, 'arubinowitsch2l.net'),
(3, 'clockyear2m.org'),
(4, 'sfinigand.com'),
(4, 'vborrelt.net');




SELECT c.email , COUNT(*) 
FROM customer c join
domains s on c.id = s.customer_id  
group by c.email order by c.email; 







CREATE TABLE product (
    id INT NOT NULL PRIMARY KEY,
    name VARCHAR(255),
    price DECIMAL(6, 2),
    in_stock SMALLINT
);

-- Create wishlists table
CREATE TABLE wishlists (
    product_id INT,
    customer_email VARCHAR(255),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

-- ===================================
-- INSERT DATA
-- ===================================

-- Insert data into products table
INSERT INTO product (id, name, price, in_stock) VALUES
(1, 'TechGadget Pro X', 324.24, 1),
(2, 'LuxuryHome Decor Set', 884.90, 1),
(3, 'FitnessTracker Elite', 698.59, 0);

-- Insert data into wishlists table
INSERT INTO wishlists (product_id, customer_email) VALUES
(1, 'user1@example.com'),
(1, 'user2@example.com'),
(2, 'user3@example.com'),
(2, 'user4@example.com'),
(2, 'user5@example.com'),
(3, 'user6@example.com'),
(1, 'user7@example.com'),
(2, 'user8@example.com'),
(1, 'user9@example.com'),
(3, 'user10@example.com');



SELECT p.name,ROUND(p.price,2), COUNT(*) FROM product p 
join wishlists w
on p.id = w.product_id  where p.in_stock =1
group by p.name,p.price






//11
CREATE TABLE campaign (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
 
-- Create table: email_stats
CREATE TABLE email_stats (
    campaign_id INT,
    emails_sent INT,
    emails_opened INT,
    PRIMARY KEY (campaign_id, emails_sent, emails_opened),
    FOREIGN KEY (campaign_id) REFERENCES campaign(id)
);
 
-- Insert data into campaign
INSERT INTO campaign (id, name) VALUES
(1, 'SummerSale2021'),
(2, 'FallPromo'),
(3, 'WinterWonderland');
 
-- Insert data into email_stats
INSERT INTO email_stats (campaign_id, emails_sent, emails_opened) VALUES
(1, 1000, 800),
(2, 1500, 1200),
(3, 2000, 1800),
(1, 500, 300),
(2, 700, 500),
(3, 800, 600),
(1, 300, 200),
(2, 400, 300),
(3, 600, 500),
(3, 400, 300)

SELECT c.name ,
SUM(s.emails_sent)as total_email_sent , 
SUM(s.emails_opened) as total_email_opened ,
SUM(s.emails_sent)- SUM(s.emails_opened) as total_not_opened
FROM email_stats s 
join campaign c on c.id =s.campaign_id 
group by c.name
order by c.name















//11
CREATE TABLE campaign (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
 
-- Create table: email_stats
CREATE TABLE email_stats (
    campaign_id INT,
    emails_sent INT,
    emails_opened INT,
    PRIMARY KEY (campaign_id, emails_sent, emails_opened),
    FOREIGN KEY (campaign_id) REFERENCES campaign(id)
);
 
-- Insert data into campaign
INSERT INTO campaign (id, name) VALUES
(1, 'SummerSale2021'),
(2, 'FallPromo'),
(3, 'WinterWonderland');
 
-- Insert data into email_stats
INSERT INTO email_stats (campaign_id, emails_sent, emails_opened) VALUES
(1, 1000, 800),
(2, 1500, 1200),
(3, 2000, 1800),
(1, 500, 300),
(2, 700, 500),
(3, 800, 600),
(1, 300, 200),
(2, 400, 300),
(3, 600, 500),
(3, 400, 300)

SELECT c.name ,
SUM(s.emails_sent)as total_email_sent , 
SUM(s.emails_opened) as total_email_opened ,
SUM(s.emails_sent)- SUM(s.emails_opened) as total_not_opened
FROM email_stats s 
join campaign c on c.id =s.campaign_id 
group by c.name
order by c.name




// 12



CREATE TABLE lots (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
 
-- Create table: email_stats
CREATE TABLE offers (
    lot_id INT,
    amount Numeric(5,2),
    FOREIGN KEY (lot_id) REFERENCES lots(id)
);

drop table offers;

INSERT INTO lots (id, name) VALUES
(1, 'Acasica'),
(2, 'Poa R'),
(3, 'calco');



 INSERT INTO offers (lot_id,amount) VALUES
(1,260.91),
(1,802.83),
(1,986.78),
(2, 814.57),
(2, 999.06),
(2, 414.67),
(3, 200.41),
(3, 593.07),
(3, 701.88),
(3, 972.87)


SELECT * FROM offers


SELECT l.name,
MAX(o.amount) as highest_offer ,
COUNT(o.lot_id) FROM lots l 
join offers o 
on l.id = o.lot_id 
group by l.name
order by l.name




 // 13

 CREATE TABLE accountp (
    id SERIAL PRIMARY KEY,
    iban VARCHAR(50) NOT NULL
);
 
-- Create transactions table
CREATE TABLE transactionsp (
    account_id INT REFERENCES accountp(id),
    dt TIMESTAMP NOT NULL,
    amount NUMERIC(10,2) NOT NULL
);
 
-- Insert data into accounts
INSERT INTO accountp (id, iban) VALUES
(1, 'BG40 RFFX 4898 53DD CZD6 KQ'),
(2, 'PT42 5267 0592 8451 8601 2180 3'),
(3, 'FR96 8758 9909 81TL R DJ71 ERKN D56');
 
-- Insert data into transactions
INSERT INTO transactionsp (account_id, dt, amount) VALUES
(1, '2022-09-02 06:33:39', 33.31),
(1, '2022-09-20 08:14:39', 31.77),
(1, '2022-09-25 06:41:45', 72.84),
(2, '2022-09-04 22:18:12', 35.26),
(2, '2022-09-17 22:18:12', 33.27),
(2, '2022-09-04 22:18:12', 70.19),
(3, '2022-09-04 22:18:12', 75.04),
(3, '2022-09-04 22:18:12', 71.19),
(3, '2022-09-04 22:18:12', 14.34),
(3, '2022-08-04 22:18:12', 69.19)

SELECT p.iban,
ROUND(MIN(s.amount),2),
ROUND(MAX(s.amount),2),
ROUND(AVG(s.amount),2),
COUNT(*)
 FROM
 accountp p join 
 transactionsp s on 
 p.id = s.account_id
 WHERE EXTRACT(YEAR from s.dt) = 2022 and 
 EXTRACT(MONTH from s.dt)=09

 group by p.iban




 // 13


 CREATE TABLE productsp (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price NUMERIC(10,2) NOT NULL,
    in_stock INT NOT NULL
);
 
-- Create wishlists table
CREATE TABLE wishlistsp (
    product_id INT REFERENCES productsp(id),
    customer_email VARCHAR(100) NOT NULL
);
 
-- Insert data into products
INSERT INTO productsp (id, name, price, in_stock) VALUES
(1, 'TechGadget Pro X', 2741.80, 1),
(2, 'LuxuryHome Decor Set', 262.84, 1),
(3, 'FitnessTracker Elite', 637.92, 0),
(4, 'GourmetCookware Set', 953.34, 1),
(5, 'Fashionista Wardrobe Collection', 525.44, 1);
 
-- Insert data into wishlists
INSERT INTO wishlistsp (product_id, customer_email) VALUES
(5, 'lyus8@wikimedia.org');



SELECT * FROM wishlistsp


SELECT  p.name, p.price , Count(w.product_id) FROM wishlistsp w 
join productsp  p on p.id = w.product_id
WHERE p.in_stock= 1
group by 
p.name,p.price
order by COUNT(w.product_id)  DESC
limit 3



// 14 
SELECT 
    p.name,
    p.price,
    COUNT(w.product_id) AS total_wishes
FROM products p
JOIN wishlists w 
    ON p.id = w.product_id
WHERE p.in_stock = 1
GROUP BY p.id, p.name, p.price
ORDER BY total_wishes DESC, p.name ASC
LIMIT 3;






// 15
SELECT 
c.email,
COUNT(p.customer_id),
SUM(p.amount)


from customer c
join purchases p 
on c.id = p.customer_id
where EXTRACT (YEAR FROM p.dt) = 2024
and extract (month from p.dt)= 3

group by c.email 









// 16
CREATE TABLE applicants (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL
);
 
-- Appointments table
CREATE TABLE appointments (
    applicant_id INT,
    dt DATE,
    is_received INT CHECK (is_received IN (0,1)),
    FOREIGN KEY (applicant_id) REFERENCES applicants(id)
);
 
-- Insert data into applicants
INSERT INTO applicants (id, email) VALUES
(1, 'nkienzle0@spiegel.de'),
(2, 'alaste1@bbc.co.uk'),
(3, 'jiochanany2@ow.ly'),
(4, 'bsenn3@salon.com'),
(5, 'bwhittall4@nhs.uk');
 
-- Insert data into appointments
INSERT INTO appointments (applicant_id, dt, is_received) VALUES
(1, '2024-04-27', 0),
(2, '2024-04-01', 0),
(3, '2024-04-15', 0),
(4, '2024-03-27', 0),
(5, '2024-03-26', 1);
 





SELECT 
a.email,
s.dt,
(make_date(2024, 04, 10) - s.dt)
FROM 
applicants a
JOIN 
appointments s
on a.id = s.applicant_id

WHERE s.is_received = 0
and (make_date(2024, 04, 10) - s.dt) > 0
group by a.email, s.dt
order by s.dt asc, a.email 




// 17


CREATE TABLE applicant (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL
);

 
-- Create appointments table
CREATE TABLE appointment (
    applicant_id INT,
    dt VARCHAR(19),
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);
 
-- Insert sample data into applicants
INSERT INTO applicant (id, email) VALUES
(1, 'rastadtt0@nsagram.com'),
(2, 'sgarmody1@salford.ac.uk'),
(3, 'mgreenslade2@statetx.us');
 
-- Insert sample data into appointments
INSERT INTO appointment (applicant_id, dt) VALUES
(1, '2024-05-26 01:35:43'),
(2, '2024-05-27 16:39:28'),
(3, '2024-05-18 19:28:52');




-- TRIM(TO_CHAR(ap.dt::timestamp,'DAY'))='sunday'




SELECT 
a.email,
ap.dt,
CASE EXTRACT (
DOW FROM ap.dt::timeStamp
)
WHEN  0 then 'Sunday'
WHEN 6 then 'Saturday'

END as day_name

FROM 

applicant a 
join appointment ap
on a.id = ap.applicant_id
WHERE EXTRACT (DOW FROM ap.dt :: timestamp) in(0,6)



//18 
 

INSERT INTO countries (id, name) VALUES
(1, 'Azerbaijan'),
(2, 'Colombia'),
(3, 'China');



-- Insert sample data into domains
INSERT INTO domain (country_id, name, is_active) VALUES
(1, 'angelfire.com', TRUE),
(1, 'free.fr', TRUE),
(1, 'google.cn', TRUE),
(1, 'nationalgeographic.com', TRUE),
(1, 'ovh.net', TRUE),
(1, 'surveymonkey.com', TRUE),
(1, 'twitpic.com', TRUE),
 
(2, 'ameblo.jp', TRUE),
(2, 'berkeley.edu', TRUE),
(2, 'multiply.com', TRUE),
(2, 'redcross.org', TRUE),
(2, 'sourceforge.net', TRUE),
 
(3, 'hc360.com', TRUE),
(3, 'liveinternet.ru', TRUE),
(3, 'squidoo.com', TRUE),
(3, 'technorati.com', TRUE),
(3, 'webnode.com', TRUE),
(3, 'yahoo.co.jp', TRUE),
 
(1, '1und1.de', FALSE),
(1, 'qq.com', FALSE);



SELECT c.name, 
COUNT(*)
FROM 
countries c
join domain d
on c.id= d.country_id
where d.is_Active=true
group by c.name 
order by c.name





//19


CREATE TABLE domains (
    name VARCHAR(255) PRIMARY KEY,
    next_renewal_date VARCHAR(19) NOT NULL
);

-- Insert sample data
INSERT INTO domains (name, next_renewal_date) VALUES
('wired.com', '2024-06-14 00:10:12'),
('blogger.com', '2024-07-18 05:54:57'),
('com.com', '2024-07-21 02:57:25');




SELECT name, next_renewal_date,
       next_renewal_date::date - make_date(2024,04,10) as diff
FROM domains;





//20


CREATE TABLE userss (
    id INT PRIMARY KEY,
    email VARCHAR(255) NOT NULL
);

-- Create transactions table
CREATE TABLE transactions (
    user_id INT REFERENCES userss(id),
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(5,2) NOT NULL
);



INSERT INTO userss (id, email) VALUES
(1, 'bblaszczynski0@devhub.com'),
(2, 'dwookey1@chronoengine.com'),
(3, 'flerway2@wikipedia.org');



-- Insert transactions data
INSERT INTO transactions (user_id, dt, amount) VALUES
(1, '2024-02-23 19:30:03', 942.50),
(1, '2024-03-07 09:01:15', 855.22),
(1, '2024-04-01 04:18:41', 253.35),
(1, '2024-04-07 02:40:58', 886.88),

(2, '2024-02-25 05:11:39', 957.77),
(2, '2024-03-06 03:00:40', 413.39),
(2, '2024-03-07 14:41:03', 906.16),
(2, '2024-03-10 00:58:13', 116.59),
(2, '2024-03-13 23:38:29', 550.31),
(2, '2024-03-22 03:07:46', 196.23),
(2, '2024-03-24 00:23:14', 399.76),
(2, '2024-03-25 12:28:18', 398.07),
(2, '2024-03-27 09:11:15', 212.33),
(2, '2024-04-09 06:33:26', 97.85),

(3, '2024-03-01 17:24:48', 323.11),
(3, '2024-03-05 10:16:06', 673.23),
(3, '2024-03-08 14:19:46', 236.74),
(3, '2024-03-23 15:37:47', 234.87),
(3, '2024-04-05 20:55:45', 989.35),
(3, '2024-04-07 05:26:35', 369.20);

SELECT u.email,

 COUNT(*) as total_transactions,

 AVG (t.amount) as avg,
MIN(t.amount) as in_amount,
MAX(t.amount) as max_amount,
SUM(t.amount) as total_amount
from 
 userss u join  
transactions t
on u.id = t.user_id
where EXTRACT (YEAR FROM t.dt::date)= '2024'
and EXTRACT (MONTH from t.dt::date)= '3'
group by u.email
order by u.email
 







//26

CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL
);

-- Create site_metrics table
CREATE TABLE site_metrics (
    customer_id INT REFERENCES customers(id),
    cpu_usage DECIMAL(5,2),
    memory_usage DECIMAL(5,2),
    disk_usage DECIMAL(5,2)
);




INSERT INTO customers (id, email) VALUES
(1, 'lrathke0@usa.gov'),
(2, 'epearsall1@fema.gov'),
(3, 'sivasechko2@cisco.com');



INSERT INTO site_metrics (customer_id, cpu_usage, memory_usage, disk_usage) VALUES
(1, 31.53, 80.84, 1.51),
(1, 12.54, 26.47, 47.74),
(1, 12.34, 46.24, 34.43),
(1, 26.64, 84.98, 17.56),
(2, 80.45, 50.05, 10.63),
(2, 40.14, 86.67, 15.98),
(2, 30.14, 34.38, 17.67),
(2, 1.11, 83.44, 2.95),
(3, 30.60, 18.60, 28.02),
(3, 41.64, 33.64, 5.20),
(3, 31.88, 7.37, 91.14),
(3, 43.20, 9.56, 40.40),
(3, 2.33, 34.29, 18.65),
(3, 11.50, 32.89, 71.39),
(3, 39.57, 4.49, 48.05),
(3, 25.06, 23.77, 33.00),
(3, 32.81, 1.59, 25.85),
(3, 48.38, 79.21, 8.31),
(3, 11.62, 26.75, 71.71),
(3, 54.43, 6.48, 4.86);





SELECT 
    c.email,
    ROUND(AVG(s.cpu_usage),2) AS avg_cpu_usage,
    ROUND(AVG(s.memory_usage),2) AS avg_memory_usage,
    ROUND(AVG(s.disk_usage) AS avg_disk_usage
FROM customers c
JOIN site_metrics s 
    ON c.id = s.customer_id
GROUP BY c.email
HAVING 
    AVG(s.cpu_usage) > 50 
    OR AVG(s.memory_usage) > 50
    OR AVG(s.disk_usage) > 50
ORDER BY c.email;





// 28



CREATE TABLE accounts (
    id SERIAL PRIMARY KEY,
    iban VARCHAR(255) NOT NULL
);

-- Create income table
CREATE TABLE income (
    account_id INT REFERENCES accounts(id),
    dt VARCHAR(19) NOT NULL,
    amount DECIMAL(6,2) NOT NULL
);




INSERT INTO accounts (id, iban) VALUES
(1, 'SK39 8924 2092 2997 1101 4161'),
(2, 'PL28 9141 8610 8442 2367 7521 0000'),
(3, 'CH93 8418 0F7G KQK4 NEHF Q'),
(4, 'GT41 TBM8 DPFH MTNS BVW5 D4CX VIRR'),
(5, 'IT27 Y015 0159 036T W7E5 I6ZD EQZ');







INSERT INTO income (account_id, dt, amount) VALUES
(1, '2024-01-17 16:43:20', 4061.53),
(1, '2024-02-28 05:30:15', 4488.11),
(1, '2024-04-07 05:41:27', 4001.91),
(2, '2023-12-21 07:38:45', 4313.69),
(2, '2024-01-08 04:48:45', 3640.82),
(2, '2024-01-20 17:31:20', 3385.15),
(3, '2024-01-06 23:18:30', 2347.15),
(3, '2024-03-08 12:53:20', 3814.86),
(3, '2024-04-01 21:18:16', 2764.27),
(4, '2024-01-02 23:52:06', 3526.08),
(4, '2024-02-04 12:32:28', 2221.91),
(4, '2024-02-11 19:44:53', 4197.07),
(4, '2024-03-06 06:28:34', 1357.44),
(4, '2024-03-16 16:13:49', 1854.52),
(5, '2023-12-31 22:08:57', 2819.54),
(5, '2024-01-14 18:03:47', 2641.20),
(5, '2024-01-23 07:50:22', 3692.56),
(5, '2024-02-28 23:43:28', 1999.09),
(5, '2024-03-20 10:29:44', 1670.18),
(5, '2024-03-27 11:12:04', 1193.15);




SELECT 
    a.iban,
    ROUND(AVG(i.amount), 2) AS avg_income,
    SUM(i.amount) AS total_income
FROM accounts a
JOIN income i ON a.id = i.account_id
WHERE 
    EXTRACT(YEAR FROM i.dt::date) = 2024
    AND EXTRACT(MONTH FROM i.dt::date) IN (1,2, 3)
GROUP BY a.iban
ORDER BY AVG(i.amount)DESC, a.iban
LIMIT 3;














SELECT 
    a.iban,
    TO_CHAR(ROUND(AVG(i.amount), 2), 'FM9999999990.00') AS average_income,
    TO_CHAR(ROUND(SUM(i.amount), 2), 'FM9999999990.00') AS total_income
FROM accounts a
JOIN income i ON a.id = i.account_id
WHERE 
    EXTRACT(YEAR FROM i.dt::date) = 2024
    AND EXTRACT(MONTH FROM i.dt::date) IN (1, 2, 3)
GROUP BY a.iban
ORDER BY AVG(i.amount) DESC, a.iban ASC
LIMIT 3;




// 29


CREATE TABLE accountss (
    id SERIAL PRIMARY KEY,
    iban VARCHAR(255) NOT NULL
);

-- Create income table
CREATE TABLE incomess (
    account_id INT REFERENCES accounts(id),
    dt VARCHAR(19),
    amount DECIMAL(6,2)
);



INSERT INTO accountss (id, iban) VALUES
(1, 'FR55 4477 6154 73ND TN3F HMOU T36'),
(2, 'DK46 1272 1831 2573 01'),
(3, 'RS53 5237 5794 6016 5411 43');






-- Insert data into income table
INSERT INTO incomess (account_id, dt, amount) VALUES
(1, '2022-12-31 10:03:42', 2779.19),
(1, '2023-02-04 08:50:14', 1777.68),
(1, '2023-02-13 04:22:07', 1954.81),
(1, '2023-03-04 14:46:04', 1547.79),
(1, '2023-05-23 15:42:13', 1208.49),
(1, '2023-05-24 23:24:07', 1521.72),
(1, '2023-07-28 11:01:46', 1792.75),
(1, '2023-12-07 14:19:09', 2374.25),
(1, '2024-01-27 05:55:36', 2803.39),
(2, '2022-12-03 18:04:34', 1826.65),
(2, '2023-02-17 00:59:57', 3074.11),
(2, '2023-03-01 08:17:15', 1007.30),
(2, '2023-08-19 09:16:41', 4515.04),
(2, '2024-01-08 09:14:22', 3321.78),
(2, '2024-01-10 15:16:28', 2033.87),
(3, '2023-05-09 07:28:27', 3158.66),
(3, '2023-05-22 04:39:34', 3851.20),
(3, '2023-07-21 19:51:14', 4152.29),
(3, '2023-10-05 19:51:14', 4722.20),
(3, '2023-11-11 2:42:59', 1592.16);





SELECT 
    a.iban,
    ROUND(SUM(i.amount), 2) AS total_income,
    '20%' AS tax_rate,
    ROUND(SUM(i.amount) * 0.20, 2) AS calculated_tax
FROM accountss a
JOIN incomess i 
    ON a.id = i.account_id
WHERE EXTRACT(YEAR FROM i.dt::date) = 2023
GROUP BY a.iban
ORDER BY a.iban;








//97
-- Create the EMPLOYEE table
CREATE TABLE EMPLOYEE (
    NAME VARCHAR(100),
    PHONE VARCHAR(15),
    AGE INT
);

-- Insert sample data
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Sam', '1000040000', 30);
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Alex', '1000020000', 60);
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Alex', '1000020012', 65);
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Sam', '1000040000', 30);
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Chris', '1000012000', 34);
INSERT INTO EMPLOYEE (NAME, PHONE, AGE) VALUES ('Chris', '1000012000', 34);


SELECT DISTINCT NAME
FROM EMPLOYEE 
group by name , phone , age
having count(*)>1




//95


CREATE TABLE STUDENTS (
    STUDENT_ID INT PRIMARY KEY,
    STUDENT_NAME VARCHAR(100),
    STUDENT_AGE INT
);



CREATE TABLE MAJORS (
    MAJOR_ID INT PRIMARY KEY,
    MAJOR_NAME VARCHAR(100)
);



CREATE TABLE REGISTER (
    STUDENT_ID INT,
    MAJOR_ID INT,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (MAJOR_ID) REFERENCES MAJORS(MAJOR_ID)
);





SELECT s.student_name , m.major_name
FROM students s join register r on 
s.student_id = r.student_id
join majors m on m.major_id = r.major_id
order by s.student_id
limit 20






